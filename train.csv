"id","text","class"
0,"C# относится к семье языков с C-подобным синтаксисом, из них его синтаксис наиболее близок к C++ и Java. Язык имеет статическую типизацию, поддерживает полиморфизм, перегрузку операторов (в том числе операторов явного и неявного приведения типа), делегаты, атрибуты, события, свойства, обобщённые типы и методы, итераторы, анонимные функции с поддержкой замыканий, LINQ, исключения, комментарии в формате XML. Переняв многое от своих предшественников — языков C++, Pascal, Модула, Smalltalk и, в особенности, Java — С#, опираясь на практику их использования, исключает некоторые модели, зарекомендовавшие себя как проблематичные при разработке программных систем, например, C# в отличие от C++ и некоторых других языков, не поддерживает множественное наследование классов (между тем допускается множественное наследование интерфейсов).",1
0,"C# относится к семье языков с C-подобным синтаксисом, из них его синтаксис наиболее близок к C++ и Java. Язык имеет статическую типизацию, поддерживает полиморфизм, перегрузку операторов (в том числе операторов явного и неявного приведения типа), делегаты, атрибуты, события, свойства, обобщённые типы и методы, итераторы, анонимные функции с поддержкой замыканий, LINQ, исключения, комментарии в формате XML. Переняв многое от своих предшественников — языков C++, Pascal, Модула, Smalltalk и, в особенности, Java — С#, опираясь на практику их использования, исключает некоторые модели, зарекомендовавшие себя как проблематичные при разработке программных систем, например, C# в отличие от C++ и некоторых других языков, не поддерживает множественное наследование классов (между тем допускается множественное наследование интерфейсов).",2
0,"C# относится к семье языков с C-подобным синтаксисом, из них его синтаксис наиболее близок к C++ и Java. Язык имеет статическую типизацию, поддерживает полиморфизм, перегрузку операторов (в том числе операторов явного и неявного приведения типа), делегаты, атрибуты, события, свойства, обобщённые типы и методы, итераторы, анонимные функции с поддержкой замыканий, LINQ, исключения, комментарии в формате XML. Переняв многое от своих предшественников — языков C++, Pascal, Модула, Smalltalk и, в особенности, Java — С#, опираясь на практику их использования, исключает некоторые модели, зарекомендовавшие себя как проблематичные при разработке программных систем, например, C# в отличие от C++ и некоторых других языков, не поддерживает множественное наследование классов (между тем допускается множественное наследование интерфейсов).",3
0,"C# относится к семье языков с C-подобным синтаксисом, из них его синтаксис наиболее близок к C++ и Java. Язык имеет статическую типизацию, поддерживает полиморфизм, перегрузку операторов (в том числе операторов явного и неявного приведения типа), делегаты, атрибуты, события, свойства, обобщённые типы и методы, итераторы, анонимные функции с поддержкой замыканий, LINQ, исключения, комментарии в формате XML. Переняв многое от своих предшественников — языков C++, Pascal, Модула, Smalltalk и, в особенности, Java — С#, опираясь на практику их использования, исключает некоторые модели, зарекомендовавшие себя как проблематичные при разработке программных систем, например, C# в отличие от C++ и некоторых других языков, не поддерживает множественное наследование классов (между тем допускается множественное наследование интерфейсов).",4
0,"C# относится к семье языков с C-подобным синтаксисом, из них его синтаксис наиболее близок к C++ и Java. Язык имеет статическую типизацию, поддерживает полиморфизм, перегрузку операторов (в том числе операторов явного и неявного приведения типа), делегаты, атрибуты, события, свойства, обобщённые типы и методы, итераторы, анонимные функции с поддержкой замыканий, LINQ, исключения, комментарии в формате XML. Переняв многое от своих предшественников — языков C++, Pascal, Модула, Smalltalk и, в особенности, Java — С#, опираясь на практику их использования, исключает некоторые модели, зарекомендовавшие себя как проблематичные при разработке программных систем, например, C# в отличие от C++ и некоторых других языков, не поддерживает множественное наследование классов (между тем допускается множественное наследование интерфейсов).",5
0,"C# относится к семье языков с C-подобным синтаксисом, из них его синтаксис наиболее близок к C++ и Java. Язык имеет статическую типизацию, поддерживает полиморфизм, перегрузку операторов (в том числе операторов явного и неявного приведения типа), делегаты, атрибуты, события, свойства, обобщённые типы и методы, итераторы, анонимные функции с поддержкой замыканий, LINQ, исключения, комментарии в формате XML. Переняв многое от своих предшественников — языков C++, Pascal, Модула, Smalltalk и, в особенности, Java — С#, опираясь на практику их использования, исключает некоторые модели, зарекомендовавшие себя как проблематичные при разработке программных систем, например, C# в отличие от C++ и некоторых других языков, не поддерживает множественное наследование классов (между тем допускается множественное наследование интерфейсов).",6
0,"C# относится к семье языков с C-подобным синтаксисом, из них его синтаксис наиболее близок к C++ и Java. Язык имеет статическую типизацию, поддерживает полиморфизм, перегрузку операторов (в том числе операторов явного и неявного приведения типа), делегаты, атрибуты, события, свойства, обобщённые типы и методы, итераторы, анонимные функции с поддержкой замыканий, LINQ, исключения, комментарии в формате XML. Переняв многое от своих предшественников — языков C++, Pascal, Модула, Smalltalk и, в особенности, Java — С#, опираясь на практику их использования, исключает некоторые модели, зарекомендовавшие себя как проблематичные при разработке программных систем, например, C# в отличие от C++ и некоторых других языков, не поддерживает множественное наследование классов (между тем допускается множественное наследование интерфейсов).",7
0,"C# относится к семье языков с C-подобным синтаксисом, из них его синтаксис наиболее близок к C++ и Java. Язык имеет статическую типизацию, поддерживает полиморфизм, перегрузку операторов (в том числе операторов явного и неявного приведения типа), делегаты, атрибуты, события, свойства, обобщённые типы и методы, итераторы, анонимные функции с поддержкой замыканий, LINQ, исключения, комментарии в формате XML. Переняв многое от своих предшественников — языков C++, Pascal, Модула, Smalltalk и, в особенности, Java — С#, опираясь на практику их использования, исключает некоторые модели, зарекомендовавшие себя как проблематичные при разработке программных систем, например, C# в отличие от C++ и некоторых других языков, не поддерживает множественное наследование классов (между тем допускается множественное наследование интерфейсов).",8
0,"C# относится к семье языков с C-подобным синтаксисом, из них его синтаксис наиболее близок к C++ и Java. Язык имеет статическую типизацию, поддерживает полиморфизм, перегрузку операторов (в том числе операторов явного и неявного приведения типа), делегаты, атрибуты, события, свойства, обобщённые типы и методы, итераторы, анонимные функции с поддержкой замыканий, LINQ, исключения, комментарии в формате XML. Переняв многое от своих предшественников — языков C++, Pascal, Модула, Smalltalk и, в особенности, Java — С#, опираясь на практику их использования, исключает некоторые модели, зарекомендовавшие себя как проблематичные при разработке программных систем, например, C# в отличие от C++ и некоторых других языков, не поддерживает множественное наследование классов (между тем допускается множественное наследование интерфейсов).",9
1,"Программы на Java транслируются в байт-код Java, выполняемый виртуальной машиной Java (JVM) — программой, обрабатывающей байтовый код и передающей инструкции оборудованию как интерпретатор.
Достоинством подобного способа выполнения программ является полная независимость байт-кода от операционной системы и оборудования, что позволяет выполнять Java-приложения на любом устройстве, для которого существует соответствующая виртуальная машина. Другой важной особенностью технологии Java является гибкая система безопасности, в рамках которой исполнение программы полностью контролируется виртуальной машиной. Любые операции, которые превышают установленные полномочия программы (например, попытка несанкционированного доступа к данным или соединения с другим компьютером), вызывают немедленное прерывание. Часто к недостаткам концепции виртуальной машины относят снижение производительности. Ряд усовершенствований несколько увеличил скорость выполнения программ на Java: применение технологии трансляции байт-кода в машинный код непосредственно во время работы программы (JIT-технология) с возможностью сохранения версий класса в машинном коде, широкое использование платформенно-ориентированного кода (native-код) в стандартных библиотеках, аппаратные средства, обеспечивающие ускоренную обработку байт-кода (например, технология Jazelle, поддерживаемая некоторыми процессорами архитектуры ARM). По данным сайта shootout.alioth.debian.org, для семи разных задач время выполнения на Java составляет в среднем в полтора-два раза больше, чем для C/C++, в некоторых случаях Java быстрее, а в отдельных случаях в 7 раз медленнее. С другой стороны, для большинства из них потребление памяти Java-машиной было в 10—30 раз больше, чем программой на C/C++. Также примечательно исследование, проведённое компанией Google, согласно которому отмечается существенно более низкая производительность и бо́льшее потребление памяти в тестовых примерах на Java в сравнении с аналогичными программами на C++. Идеи, заложенные в концепцию и различные реализации среды виртуальной машины Java, вдохновили множество энтузиастов на расширение перечня языков, которые могли бы быть использованы для создания программ, исполняемых на виртуальной машине. Эти идеи нашли также выражение в спецификации общеязыковой инфраструктуры CLI, заложенной в основу платформы .NET компанией Microsoft.",0
1,"Программы на Java транслируются в байт-код Java, выполняемый виртуальной машиной Java (JVM) — программой, обрабатывающей байтовый код и передающей инструкции оборудованию как интерпретатор.
Достоинством подобного способа выполнения программ является полная независимость байт-кода от операционной системы и оборудования, что позволяет выполнять Java-приложения на любом устройстве, для которого существует соответствующая виртуальная машина. Другой важной особенностью технологии Java является гибкая система безопасности, в рамках которой исполнение программы полностью контролируется виртуальной машиной. Любые операции, которые превышают установленные полномочия программы (например, попытка несанкционированного доступа к данным или соединения с другим компьютером), вызывают немедленное прерывание. Часто к недостаткам концепции виртуальной машины относят снижение производительности. Ряд усовершенствований несколько увеличил скорость выполнения программ на Java: применение технологии трансляции байт-кода в машинный код непосредственно во время работы программы (JIT-технология) с возможностью сохранения версий класса в машинном коде, широкое использование платформенно-ориентированного кода (native-код) в стандартных библиотеках, аппаратные средства, обеспечивающие ускоренную обработку байт-кода (например, технология Jazelle, поддерживаемая некоторыми процессорами архитектуры ARM). По данным сайта shootout.alioth.debian.org, для семи разных задач время выполнения на Java составляет в среднем в полтора-два раза больше, чем для C/C++, в некоторых случаях Java быстрее, а в отдельных случаях в 7 раз медленнее. С другой стороны, для большинства из них потребление памяти Java-машиной было в 10—30 раз больше, чем программой на C/C++. Также примечательно исследование, проведённое компанией Google, согласно которому отмечается существенно более низкая производительность и бо́льшее потребление памяти в тестовых примерах на Java в сравнении с аналогичными программами на C++. Идеи, заложенные в концепцию и различные реализации среды виртуальной машины Java, вдохновили множество энтузиастов на расширение перечня языков, которые могли бы быть использованы для создания программ, исполняемых на виртуальной машине. Эти идеи нашли также выражение в спецификации общеязыковой инфраструктуры CLI, заложенной в основу платформы .NET компанией Microsoft.",2
1,"Программы на Java транслируются в байт-код Java, выполняемый виртуальной машиной Java (JVM) — программой, обрабатывающей байтовый код и передающей инструкции оборудованию как интерпретатор.
Достоинством подобного способа выполнения программ является полная независимость байт-кода от операционной системы и оборудования, что позволяет выполнять Java-приложения на любом устройстве, для которого существует соответствующая виртуальная машина. Другой важной особенностью технологии Java является гибкая система безопасности, в рамках которой исполнение программы полностью контролируется виртуальной машиной. Любые операции, которые превышают установленные полномочия программы (например, попытка несанкционированного доступа к данным или соединения с другим компьютером), вызывают немедленное прерывание. Часто к недостаткам концепции виртуальной машины относят снижение производительности. Ряд усовершенствований несколько увеличил скорость выполнения программ на Java: применение технологии трансляции байт-кода в машинный код непосредственно во время работы программы (JIT-технология) с возможностью сохранения версий класса в машинном коде, широкое использование платформенно-ориентированного кода (native-код) в стандартных библиотеках, аппаратные средства, обеспечивающие ускоренную обработку байт-кода (например, технология Jazelle, поддерживаемая некоторыми процессорами архитектуры ARM). По данным сайта shootout.alioth.debian.org, для семи разных задач время выполнения на Java составляет в среднем в полтора-два раза больше, чем для C/C++, в некоторых случаях Java быстрее, а в отдельных случаях в 7 раз медленнее. С другой стороны, для большинства из них потребление памяти Java-машиной было в 10—30 раз больше, чем программой на C/C++. Также примечательно исследование, проведённое компанией Google, согласно которому отмечается существенно более низкая производительность и бо́льшее потребление памяти в тестовых примерах на Java в сравнении с аналогичными программами на C++. Идеи, заложенные в концепцию и различные реализации среды виртуальной машины Java, вдохновили множество энтузиастов на расширение перечня языков, которые могли бы быть использованы для создания программ, исполняемых на виртуальной машине. Эти идеи нашли также выражение в спецификации общеязыковой инфраструктуры CLI, заложенной в основу платформы .NET компанией Microsoft.",3
1,"Программы на Java транслируются в байт-код Java, выполняемый виртуальной машиной Java (JVM) — программой, обрабатывающей байтовый код и передающей инструкции оборудованию как интерпретатор.
Достоинством подобного способа выполнения программ является полная независимость байт-кода от операционной системы и оборудования, что позволяет выполнять Java-приложения на любом устройстве, для которого существует соответствующая виртуальная машина. Другой важной особенностью технологии Java является гибкая система безопасности, в рамках которой исполнение программы полностью контролируется виртуальной машиной. Любые операции, которые превышают установленные полномочия программы (например, попытка несанкционированного доступа к данным или соединения с другим компьютером), вызывают немедленное прерывание. Часто к недостаткам концепции виртуальной машины относят снижение производительности. Ряд усовершенствований несколько увеличил скорость выполнения программ на Java: применение технологии трансляции байт-кода в машинный код непосредственно во время работы программы (JIT-технология) с возможностью сохранения версий класса в машинном коде, широкое использование платформенно-ориентированного кода (native-код) в стандартных библиотеках, аппаратные средства, обеспечивающие ускоренную обработку байт-кода (например, технология Jazelle, поддерживаемая некоторыми процессорами архитектуры ARM). По данным сайта shootout.alioth.debian.org, для семи разных задач время выполнения на Java составляет в среднем в полтора-два раза больше, чем для C/C++, в некоторых случаях Java быстрее, а в отдельных случаях в 7 раз медленнее. С другой стороны, для большинства из них потребление памяти Java-машиной было в 10—30 раз больше, чем программой на C/C++. Также примечательно исследование, проведённое компанией Google, согласно которому отмечается существенно более низкая производительность и бо́льшее потребление памяти в тестовых примерах на Java в сравнении с аналогичными программами на C++. Идеи, заложенные в концепцию и различные реализации среды виртуальной машины Java, вдохновили множество энтузиастов на расширение перечня языков, которые могли бы быть использованы для создания программ, исполняемых на виртуальной машине. Эти идеи нашли также выражение в спецификации общеязыковой инфраструктуры CLI, заложенной в основу платформы .NET компанией Microsoft.",4
1,"Программы на Java транслируются в байт-код Java, выполняемый виртуальной машиной Java (JVM) — программой, обрабатывающей байтовый код и передающей инструкции оборудованию как интерпретатор.
Достоинством подобного способа выполнения программ является полная независимость байт-кода от операционной системы и оборудования, что позволяет выполнять Java-приложения на любом устройстве, для которого существует соответствующая виртуальная машина. Другой важной особенностью технологии Java является гибкая система безопасности, в рамках которой исполнение программы полностью контролируется виртуальной машиной. Любые операции, которые превышают установленные полномочия программы (например, попытка несанкционированного доступа к данным или соединения с другим компьютером), вызывают немедленное прерывание. Часто к недостаткам концепции виртуальной машины относят снижение производительности. Ряд усовершенствований несколько увеличил скорость выполнения программ на Java: применение технологии трансляции байт-кода в машинный код непосредственно во время работы программы (JIT-технология) с возможностью сохранения версий класса в машинном коде, широкое использование платформенно-ориентированного кода (native-код) в стандартных библиотеках, аппаратные средства, обеспечивающие ускоренную обработку байт-кода (например, технология Jazelle, поддерживаемая некоторыми процессорами архитектуры ARM). По данным сайта shootout.alioth.debian.org, для семи разных задач время выполнения на Java составляет в среднем в полтора-два раза больше, чем для C/C++, в некоторых случаях Java быстрее, а в отдельных случаях в 7 раз медленнее. С другой стороны, для большинства из них потребление памяти Java-машиной было в 10—30 раз больше, чем программой на C/C++. Также примечательно исследование, проведённое компанией Google, согласно которому отмечается существенно более низкая производительность и бо́льшее потребление памяти в тестовых примерах на Java в сравнении с аналогичными программами на C++. Идеи, заложенные в концепцию и различные реализации среды виртуальной машины Java, вдохновили множество энтузиастов на расширение перечня языков, которые могли бы быть использованы для создания программ, исполняемых на виртуальной машине. Эти идеи нашли также выражение в спецификации общеязыковой инфраструктуры CLI, заложенной в основу платформы .NET компанией Microsoft.",5
1,"Программы на Java транслируются в байт-код Java, выполняемый виртуальной машиной Java (JVM) — программой, обрабатывающей байтовый код и передающей инструкции оборудованию как интерпретатор.
Достоинством подобного способа выполнения программ является полная независимость байт-кода от операционной системы и оборудования, что позволяет выполнять Java-приложения на любом устройстве, для которого существует соответствующая виртуальная машина. Другой важной особенностью технологии Java является гибкая система безопасности, в рамках которой исполнение программы полностью контролируется виртуальной машиной. Любые операции, которые превышают установленные полномочия программы (например, попытка несанкционированного доступа к данным или соединения с другим компьютером), вызывают немедленное прерывание. Часто к недостаткам концепции виртуальной машины относят снижение производительности. Ряд усовершенствований несколько увеличил скорость выполнения программ на Java: применение технологии трансляции байт-кода в машинный код непосредственно во время работы программы (JIT-технология) с возможностью сохранения версий класса в машинном коде, широкое использование платформенно-ориентированного кода (native-код) в стандартных библиотеках, аппаратные средства, обеспечивающие ускоренную обработку байт-кода (например, технология Jazelle, поддерживаемая некоторыми процессорами архитектуры ARM). По данным сайта shootout.alioth.debian.org, для семи разных задач время выполнения на Java составляет в среднем в полтора-два раза больше, чем для C/C++, в некоторых случаях Java быстрее, а в отдельных случаях в 7 раз медленнее. С другой стороны, для большинства из них потребление памяти Java-машиной было в 10—30 раз больше, чем программой на C/C++. Также примечательно исследование, проведённое компанией Google, согласно которому отмечается существенно более низкая производительность и бо́льшее потребление памяти в тестовых примерах на Java в сравнении с аналогичными программами на C++. Идеи, заложенные в концепцию и различные реализации среды виртуальной машины Java, вдохновили множество энтузиастов на расширение перечня языков, которые могли бы быть использованы для создания программ, исполняемых на виртуальной машине. Эти идеи нашли также выражение в спецификации общеязыковой инфраструктуры CLI, заложенной в основу платформы .NET компанией Microsoft.",6
1,"Программы на Java транслируются в байт-код Java, выполняемый виртуальной машиной Java (JVM) — программой, обрабатывающей байтовый код и передающей инструкции оборудованию как интерпретатор.
Достоинством подобного способа выполнения программ является полная независимость байт-кода от операционной системы и оборудования, что позволяет выполнять Java-приложения на любом устройстве, для которого существует соответствующая виртуальная машина. Другой важной особенностью технологии Java является гибкая система безопасности, в рамках которой исполнение программы полностью контролируется виртуальной машиной. Любые операции, которые превышают установленные полномочия программы (например, попытка несанкционированного доступа к данным или соединения с другим компьютером), вызывают немедленное прерывание. Часто к недостаткам концепции виртуальной машины относят снижение производительности. Ряд усовершенствований несколько увеличил скорость выполнения программ на Java: применение технологии трансляции байт-кода в машинный код непосредственно во время работы программы (JIT-технология) с возможностью сохранения версий класса в машинном коде, широкое использование платформенно-ориентированного кода (native-код) в стандартных библиотеках, аппаратные средства, обеспечивающие ускоренную обработку байт-кода (например, технология Jazelle, поддерживаемая некоторыми процессорами архитектуры ARM). По данным сайта shootout.alioth.debian.org, для семи разных задач время выполнения на Java составляет в среднем в полтора-два раза больше, чем для C/C++, в некоторых случаях Java быстрее, а в отдельных случаях в 7 раз медленнее. С другой стороны, для большинства из них потребление памяти Java-машиной было в 10—30 раз больше, чем программой на C/C++. Также примечательно исследование, проведённое компанией Google, согласно которому отмечается существенно более низкая производительность и бо́льшее потребление памяти в тестовых примерах на Java в сравнении с аналогичными программами на C++. Идеи, заложенные в концепцию и различные реализации среды виртуальной машины Java, вдохновили множество энтузиастов на расширение перечня языков, которые могли бы быть использованы для создания программ, исполняемых на виртуальной машине. Эти идеи нашли также выражение в спецификации общеязыковой инфраструктуры CLI, заложенной в основу платформы .NET компанией Microsoft.",7
1,"Программы на Java транслируются в байт-код Java, выполняемый виртуальной машиной Java (JVM) — программой, обрабатывающей байтовый код и передающей инструкции оборудованию как интерпретатор.
Достоинством подобного способа выполнения программ является полная независимость байт-кода от операционной системы и оборудования, что позволяет выполнять Java-приложения на любом устройстве, для которого существует соответствующая виртуальная машина. Другой важной особенностью технологии Java является гибкая система безопасности, в рамках которой исполнение программы полностью контролируется виртуальной машиной. Любые операции, которые превышают установленные полномочия программы (например, попытка несанкционированного доступа к данным или соединения с другим компьютером), вызывают немедленное прерывание. Часто к недостаткам концепции виртуальной машины относят снижение производительности. Ряд усовершенствований несколько увеличил скорость выполнения программ на Java: применение технологии трансляции байт-кода в машинный код непосредственно во время работы программы (JIT-технология) с возможностью сохранения версий класса в машинном коде, широкое использование платформенно-ориентированного кода (native-код) в стандартных библиотеках, аппаратные средства, обеспечивающие ускоренную обработку байт-кода (например, технология Jazelle, поддерживаемая некоторыми процессорами архитектуры ARM). По данным сайта shootout.alioth.debian.org, для семи разных задач время выполнения на Java составляет в среднем в полтора-два раза больше, чем для C/C++, в некоторых случаях Java быстрее, а в отдельных случаях в 7 раз медленнее. С другой стороны, для большинства из них потребление памяти Java-машиной было в 10—30 раз больше, чем программой на C/C++. Также примечательно исследование, проведённое компанией Google, согласно которому отмечается существенно более низкая производительность и бо́льшее потребление памяти в тестовых примерах на Java в сравнении с аналогичными программами на C++. Идеи, заложенные в концепцию и различные реализации среды виртуальной машины Java, вдохновили множество энтузиастов на расширение перечня языков, которые могли бы быть использованы для создания программ, исполняемых на виртуальной машине. Эти идеи нашли также выражение в спецификации общеязыковой инфраструктуры CLI, заложенной в основу платформы .NET компанией Microsoft.",8
1,"Программы на Java транслируются в байт-код Java, выполняемый виртуальной машиной Java (JVM) — программой, обрабатывающей байтовый код и передающей инструкции оборудованию как интерпретатор.
Достоинством подобного способа выполнения программ является полная независимость байт-кода от операционной системы и оборудования, что позволяет выполнять Java-приложения на любом устройстве, для которого существует соответствующая виртуальная машина. Другой важной особенностью технологии Java является гибкая система безопасности, в рамках которой исполнение программы полностью контролируется виртуальной машиной. Любые операции, которые превышают установленные полномочия программы (например, попытка несанкционированного доступа к данным или соединения с другим компьютером), вызывают немедленное прерывание. Часто к недостаткам концепции виртуальной машины относят снижение производительности. Ряд усовершенствований несколько увеличил скорость выполнения программ на Java: применение технологии трансляции байт-кода в машинный код непосредственно во время работы программы (JIT-технология) с возможностью сохранения версий класса в машинном коде, широкое использование платформенно-ориентированного кода (native-код) в стандартных библиотеках, аппаратные средства, обеспечивающие ускоренную обработку байт-кода (например, технология Jazelle, поддерживаемая некоторыми процессорами архитектуры ARM). По данным сайта shootout.alioth.debian.org, для семи разных задач время выполнения на Java составляет в среднем в полтора-два раза больше, чем для C/C++, в некоторых случаях Java быстрее, а в отдельных случаях в 7 раз медленнее. С другой стороны, для большинства из них потребление памяти Java-машиной было в 10—30 раз больше, чем программой на C/C++. Также примечательно исследование, проведённое компанией Google, согласно которому отмечается существенно более низкая производительность и бо́льшее потребление памяти в тестовых примерах на Java в сравнении с аналогичными программами на C++. Идеи, заложенные в концепцию и различные реализации среды виртуальной машины Java, вдохновили множество энтузиастов на расширение перечня языков, которые могли бы быть использованы для создания программ, исполняемых на виртуальной машине. Эти идеи нашли также выражение в спецификации общеязыковой инфраструктуры CLI, заложенной в основу платформы .NET компанией Microsoft.",9
2,"C++ широко используется для разработки программного обеспечения, являясь одним из самых популярных языков программирования. Область его применения включает создание операционных систем, разнообразных прикладных программ, драйверов устройств, приложений для встраиваемых систем, высокопроизводительных серверов, а также развлекательных приложений (игр). Существует множество реализаций языка C++, как бесплатных, так и коммерческих и для различных платформ. Например, на платформе x86 это GCC, Visual C++, Intel C++ Compiler, Embarcadero (Borland) C++ Builder и другие. C++ оказал огромное влияние на другие языки программирования, в первую очередь на Java и C#. Синтаксис C++ унаследован от языка C. Одним из принципов разработки было сохранение совместимости с C. Тем не менее, C++ не является в строгом смысле надмножеством C; множество программ, которые могут одинаково успешно транслироваться как компиляторами C, так и компиляторами C++, довольно велико, но не включает все возможные программы на C.",0
2,"C++ широко используется для разработки программного обеспечения, являясь одним из самых популярных языков программирования. Область его применения включает создание операционных систем, разнообразных прикладных программ, драйверов устройств, приложений для встраиваемых систем, высокопроизводительных серверов, а также развлекательных приложений (игр). Существует множество реализаций языка C++, как бесплатных, так и коммерческих и для различных платформ. Например, на платформе x86 это GCC, Visual C++, Intel C++ Compiler, Embarcadero (Borland) C++ Builder и другие. C++ оказал огромное влияние на другие языки программирования, в первую очередь на Java и C#. Синтаксис C++ унаследован от языка C. Одним из принципов разработки было сохранение совместимости с C. Тем не менее, C++ не является в строгом смысле надмножеством C; множество программ, которые могут одинаково успешно транслироваться как компиляторами C, так и компиляторами C++, довольно велико, но не включает все возможные программы на C.",1
2,"C++ широко используется для разработки программного обеспечения, являясь одним из самых популярных языков программирования. Область его применения включает создание операционных систем, разнообразных прикладных программ, драйверов устройств, приложений для встраиваемых систем, высокопроизводительных серверов, а также развлекательных приложений (игр). Существует множество реализаций языка C++, как бесплатных, так и коммерческих и для различных платформ. Например, на платформе x86 это GCC, Visual C++, Intel C++ Compiler, Embarcadero (Borland) C++ Builder и другие. C++ оказал огромное влияние на другие языки программирования, в первую очередь на Java и C#. Синтаксис C++ унаследован от языка C. Одним из принципов разработки было сохранение совместимости с C. Тем не менее, C++ не является в строгом смысле надмножеством C; множество программ, которые могут одинаково успешно транслироваться как компиляторами C, так и компиляторами C++, довольно велико, но не включает все возможные программы на C.",3
2,"C++ широко используется для разработки программного обеспечения, являясь одним из самых популярных языков программирования. Область его применения включает создание операционных систем, разнообразных прикладных программ, драйверов устройств, приложений для встраиваемых систем, высокопроизводительных серверов, а также развлекательных приложений (игр). Существует множество реализаций языка C++, как бесплатных, так и коммерческих и для различных платформ. Например, на платформе x86 это GCC, Visual C++, Intel C++ Compiler, Embarcadero (Borland) C++ Builder и другие. C++ оказал огромное влияние на другие языки программирования, в первую очередь на Java и C#. Синтаксис C++ унаследован от языка C. Одним из принципов разработки было сохранение совместимости с C. Тем не менее, C++ не является в строгом смысле надмножеством C; множество программ, которые могут одинаково успешно транслироваться как компиляторами C, так и компиляторами C++, довольно велико, но не включает все возможные программы на C.",4
2,"C++ широко используется для разработки программного обеспечения, являясь одним из самых популярных языков программирования. Область его применения включает создание операционных систем, разнообразных прикладных программ, драйверов устройств, приложений для встраиваемых систем, высокопроизводительных серверов, а также развлекательных приложений (игр). Существует множество реализаций языка C++, как бесплатных, так и коммерческих и для различных платформ. Например, на платформе x86 это GCC, Visual C++, Intel C++ Compiler, Embarcadero (Borland) C++ Builder и другие. C++ оказал огромное влияние на другие языки программирования, в первую очередь на Java и C#. Синтаксис C++ унаследован от языка C. Одним из принципов разработки было сохранение совместимости с C. Тем не менее, C++ не является в строгом смысле надмножеством C; множество программ, которые могут одинаково успешно транслироваться как компиляторами C, так и компиляторами C++, довольно велико, но не включает все возможные программы на C.",5
2,"C++ широко используется для разработки программного обеспечения, являясь одним из самых популярных языков программирования. Область его применения включает создание операционных систем, разнообразных прикладных программ, драйверов устройств, приложений для встраиваемых систем, высокопроизводительных серверов, а также развлекательных приложений (игр). Существует множество реализаций языка C++, как бесплатных, так и коммерческих и для различных платформ. Например, на платформе x86 это GCC, Visual C++, Intel C++ Compiler, Embarcadero (Borland) C++ Builder и другие. C++ оказал огромное влияние на другие языки программирования, в первую очередь на Java и C#. Синтаксис C++ унаследован от языка C. Одним из принципов разработки было сохранение совместимости с C. Тем не менее, C++ не является в строгом смысле надмножеством C; множество программ, которые могут одинаково успешно транслироваться как компиляторами C, так и компиляторами C++, довольно велико, но не включает все возможные программы на C.",6
2,"C++ широко используется для разработки программного обеспечения, являясь одним из самых популярных языков программирования. Область его применения включает создание операционных систем, разнообразных прикладных программ, драйверов устройств, приложений для встраиваемых систем, высокопроизводительных серверов, а также развлекательных приложений (игр). Существует множество реализаций языка C++, как бесплатных, так и коммерческих и для различных платформ. Например, на платформе x86 это GCC, Visual C++, Intel C++ Compiler, Embarcadero (Borland) C++ Builder и другие. C++ оказал огромное влияние на другие языки программирования, в первую очередь на Java и C#. Синтаксис C++ унаследован от языка C. Одним из принципов разработки было сохранение совместимости с C. Тем не менее, C++ не является в строгом смысле надмножеством C; множество программ, которые могут одинаково успешно транслироваться как компиляторами C, так и компиляторами C++, довольно велико, но не включает все возможные программы на C.",7
2,"C++ широко используется для разработки программного обеспечения, являясь одним из самых популярных языков программирования. Область его применения включает создание операционных систем, разнообразных прикладных программ, драйверов устройств, приложений для встраиваемых систем, высокопроизводительных серверов, а также развлекательных приложений (игр). Существует множество реализаций языка C++, как бесплатных, так и коммерческих и для различных платформ. Например, на платформе x86 это GCC, Visual C++, Intel C++ Compiler, Embarcadero (Borland) C++ Builder и другие. C++ оказал огромное влияние на другие языки программирования, в первую очередь на Java и C#. Синтаксис C++ унаследован от языка C. Одним из принципов разработки было сохранение совместимости с C. Тем не менее, C++ не является в строгом смысле надмножеством C; множество программ, которые могут одинаково успешно транслироваться как компиляторами C, так и компиляторами C++, довольно велико, но не включает все возможные программы на C.",8
2,"C++ широко используется для разработки программного обеспечения, являясь одним из самых популярных языков программирования. Область его применения включает создание операционных систем, разнообразных прикладных программ, драйверов устройств, приложений для встраиваемых систем, высокопроизводительных серверов, а также развлекательных приложений (игр). Существует множество реализаций языка C++, как бесплатных, так и коммерческих и для различных платформ. Например, на платформе x86 это GCC, Visual C++, Intel C++ Compiler, Embarcadero (Borland) C++ Builder и другие. C++ оказал огромное влияние на другие языки программирования, в первую очередь на Java и C#. Синтаксис C++ унаследован от языка C. Одним из принципов разработки было сохранение совместимости с C. Тем не менее, C++ не является в строгом смысле надмножеством C; множество программ, которые могут одинаково успешно транслироваться как компиляторами C, так и компиляторами C++, довольно велико, но не включает все возможные программы на C.",9
3,"Особенностями языка являются строгая типизация и наличие средств структурного (процедурного) программирования. Паскаль был одним из первых таких языков. По мнению Вирта, язык должен способствовать дисциплинированному программированию, поэтому, наряду со строгой типизацией, в Паскале сведены к минимуму возможные синтаксические неоднозначности, а сам синтаксис автор постарался сделать интуитивно понятным даже при первом знакомстве с языком. Тем не менее, первоначально язык имел ряд ограничений: невозможность передачи функциям массивов переменной длины, отсутствие нормальных средств работы с динамической памятью, ограниченная библиотека ввода-вывода, отсутствие средств для подключения функций, написанных на других языках, отсутствие средств раздельной компиляции и т. п. Подробный разбор недостатков языка Паскаль того времени был выполнен Брайаном Керниганом в статье «Почему Паскаль не является моим любимым языком программирования» (эта статья вышла в начале 1980-х, когда уже существовал язык Модула-2, потомок Паскаля, избавленный от большинства его пороков, а также более развитые диалекты Паскаля). Некоторые недостатки Паскаля были исправлены в ISO-стандарте 1982 года, в частности, в языке появились открытые массивы, давшие возможность использовать одни и те же процедуры для обработки одномерных массивов различных размеров.",0
3,"Особенностями языка являются строгая типизация и наличие средств структурного (процедурного) программирования. Паскаль был одним из первых таких языков. По мнению Вирта, язык должен способствовать дисциплинированному программированию, поэтому, наряду со строгой типизацией, в Паскале сведены к минимуму возможные синтаксические неоднозначности, а сам синтаксис автор постарался сделать интуитивно понятным даже при первом знакомстве с языком. Тем не менее, первоначально язык имел ряд ограничений: невозможность передачи функциям массивов переменной длины, отсутствие нормальных средств работы с динамической памятью, ограниченная библиотека ввода-вывода, отсутствие средств для подключения функций, написанных на других языках, отсутствие средств раздельной компиляции и т. п. Подробный разбор недостатков языка Паскаль того времени был выполнен Брайаном Керниганом в статье «Почему Паскаль не является моим любимым языком программирования» (эта статья вышла в начале 1980-х, когда уже существовал язык Модула-2, потомок Паскаля, избавленный от большинства его пороков, а также более развитые диалекты Паскаля). Некоторые недостатки Паскаля были исправлены в ISO-стандарте 1982 года, в частности, в языке появились открытые массивы, давшие возможность использовать одни и те же процедуры для обработки одномерных массивов различных размеров.",1
3,"Особенностями языка являются строгая типизация и наличие средств структурного (процедурного) программирования. Паскаль был одним из первых таких языков. По мнению Вирта, язык должен способствовать дисциплинированному программированию, поэтому, наряду со строгой типизацией, в Паскале сведены к минимуму возможные синтаксические неоднозначности, а сам синтаксис автор постарался сделать интуитивно понятным даже при первом знакомстве с языком. Тем не менее, первоначально язык имел ряд ограничений: невозможность передачи функциям массивов переменной длины, отсутствие нормальных средств работы с динамической памятью, ограниченная библиотека ввода-вывода, отсутствие средств для подключения функций, написанных на других языках, отсутствие средств раздельной компиляции и т. п. Подробный разбор недостатков языка Паскаль того времени был выполнен Брайаном Керниганом в статье «Почему Паскаль не является моим любимым языком программирования» (эта статья вышла в начале 1980-х, когда уже существовал язык Модула-2, потомок Паскаля, избавленный от большинства его пороков, а также более развитые диалекты Паскаля). Некоторые недостатки Паскаля были исправлены в ISO-стандарте 1982 года, в частности, в языке появились открытые массивы, давшие возможность использовать одни и те же процедуры для обработки одномерных массивов различных размеров.",2
3,"Особенностями языка являются строгая типизация и наличие средств структурного (процедурного) программирования. Паскаль был одним из первых таких языков. По мнению Вирта, язык должен способствовать дисциплинированному программированию, поэтому, наряду со строгой типизацией, в Паскале сведены к минимуму возможные синтаксические неоднозначности, а сам синтаксис автор постарался сделать интуитивно понятным даже при первом знакомстве с языком. Тем не менее, первоначально язык имел ряд ограничений: невозможность передачи функциям массивов переменной длины, отсутствие нормальных средств работы с динамической памятью, ограниченная библиотека ввода-вывода, отсутствие средств для подключения функций, написанных на других языках, отсутствие средств раздельной компиляции и т. п. Подробный разбор недостатков языка Паскаль того времени был выполнен Брайаном Керниганом в статье «Почему Паскаль не является моим любимым языком программирования» (эта статья вышла в начале 1980-х, когда уже существовал язык Модула-2, потомок Паскаля, избавленный от большинства его пороков, а также более развитые диалекты Паскаля). Некоторые недостатки Паскаля были исправлены в ISO-стандарте 1982 года, в частности, в языке появились открытые массивы, давшие возможность использовать одни и те же процедуры для обработки одномерных массивов различных размеров.",4
3,"Особенностями языка являются строгая типизация и наличие средств структурного (процедурного) программирования. Паскаль был одним из первых таких языков. По мнению Вирта, язык должен способствовать дисциплинированному программированию, поэтому, наряду со строгой типизацией, в Паскале сведены к минимуму возможные синтаксические неоднозначности, а сам синтаксис автор постарался сделать интуитивно понятным даже при первом знакомстве с языком. Тем не менее, первоначально язык имел ряд ограничений: невозможность передачи функциям массивов переменной длины, отсутствие нормальных средств работы с динамической памятью, ограниченная библиотека ввода-вывода, отсутствие средств для подключения функций, написанных на других языках, отсутствие средств раздельной компиляции и т. п. Подробный разбор недостатков языка Паскаль того времени был выполнен Брайаном Керниганом в статье «Почему Паскаль не является моим любимым языком программирования» (эта статья вышла в начале 1980-х, когда уже существовал язык Модула-2, потомок Паскаля, избавленный от большинства его пороков, а также более развитые диалекты Паскаля). Некоторые недостатки Паскаля были исправлены в ISO-стандарте 1982 года, в частности, в языке появились открытые массивы, давшие возможность использовать одни и те же процедуры для обработки одномерных массивов различных размеров.",5
3,"Особенностями языка являются строгая типизация и наличие средств структурного (процедурного) программирования. Паскаль был одним из первых таких языков. По мнению Вирта, язык должен способствовать дисциплинированному программированию, поэтому, наряду со строгой типизацией, в Паскале сведены к минимуму возможные синтаксические неоднозначности, а сам синтаксис автор постарался сделать интуитивно понятным даже при первом знакомстве с языком. Тем не менее, первоначально язык имел ряд ограничений: невозможность передачи функциям массивов переменной длины, отсутствие нормальных средств работы с динамической памятью, ограниченная библиотека ввода-вывода, отсутствие средств для подключения функций, написанных на других языках, отсутствие средств раздельной компиляции и т. п. Подробный разбор недостатков языка Паскаль того времени был выполнен Брайаном Керниганом в статье «Почему Паскаль не является моим любимым языком программирования» (эта статья вышла в начале 1980-х, когда уже существовал язык Модула-2, потомок Паскаля, избавленный от большинства его пороков, а также более развитые диалекты Паскаля). Некоторые недостатки Паскаля были исправлены в ISO-стандарте 1982 года, в частности, в языке появились открытые массивы, давшие возможность использовать одни и те же процедуры для обработки одномерных массивов различных размеров.",6
3,"Особенностями языка являются строгая типизация и наличие средств структурного (процедурного) программирования. Паскаль был одним из первых таких языков. По мнению Вирта, язык должен способствовать дисциплинированному программированию, поэтому, наряду со строгой типизацией, в Паскале сведены к минимуму возможные синтаксические неоднозначности, а сам синтаксис автор постарался сделать интуитивно понятным даже при первом знакомстве с языком. Тем не менее, первоначально язык имел ряд ограничений: невозможность передачи функциям массивов переменной длины, отсутствие нормальных средств работы с динамической памятью, ограниченная библиотека ввода-вывода, отсутствие средств для подключения функций, написанных на других языках, отсутствие средств раздельной компиляции и т. п. Подробный разбор недостатков языка Паскаль того времени был выполнен Брайаном Керниганом в статье «Почему Паскаль не является моим любимым языком программирования» (эта статья вышла в начале 1980-х, когда уже существовал язык Модула-2, потомок Паскаля, избавленный от большинства его пороков, а также более развитые диалекты Паскаля). Некоторые недостатки Паскаля были исправлены в ISO-стандарте 1982 года, в частности, в языке появились открытые массивы, давшие возможность использовать одни и те же процедуры для обработки одномерных массивов различных размеров.",7
3,"Особенностями языка являются строгая типизация и наличие средств структурного (процедурного) программирования. Паскаль был одним из первых таких языков. По мнению Вирта, язык должен способствовать дисциплинированному программированию, поэтому, наряду со строгой типизацией, в Паскале сведены к минимуму возможные синтаксические неоднозначности, а сам синтаксис автор постарался сделать интуитивно понятным даже при первом знакомстве с языком. Тем не менее, первоначально язык имел ряд ограничений: невозможность передачи функциям массивов переменной длины, отсутствие нормальных средств работы с динамической памятью, ограниченная библиотека ввода-вывода, отсутствие средств для подключения функций, написанных на других языках, отсутствие средств раздельной компиляции и т. п. Подробный разбор недостатков языка Паскаль того времени был выполнен Брайаном Керниганом в статье «Почему Паскаль не является моим любимым языком программирования» (эта статья вышла в начале 1980-х, когда уже существовал язык Модула-2, потомок Паскаля, избавленный от большинства его пороков, а также более развитые диалекты Паскаля). Некоторые недостатки Паскаля были исправлены в ISO-стандарте 1982 года, в частности, в языке появились открытые массивы, давшие возможность использовать одни и те же процедуры для обработки одномерных массивов различных размеров.",8
3,"Особенностями языка являются строгая типизация и наличие средств структурного (процедурного) программирования. Паскаль был одним из первых таких языков. По мнению Вирта, язык должен способствовать дисциплинированному программированию, поэтому, наряду со строгой типизацией, в Паскале сведены к минимуму возможные синтаксические неоднозначности, а сам синтаксис автор постарался сделать интуитивно понятным даже при первом знакомстве с языком. Тем не менее, первоначально язык имел ряд ограничений: невозможность передачи функциям массивов переменной длины, отсутствие нормальных средств работы с динамической памятью, ограниченная библиотека ввода-вывода, отсутствие средств для подключения функций, написанных на других языках, отсутствие средств раздельной компиляции и т. п. Подробный разбор недостатков языка Паскаль того времени был выполнен Брайаном Керниганом в статье «Почему Паскаль не является моим любимым языком программирования» (эта статья вышла в начале 1980-х, когда уже существовал язык Модула-2, потомок Паскаля, избавленный от большинства его пороков, а также более развитые диалекты Паскаля). Некоторые недостатки Паскаля были исправлены в ISO-стандарте 1982 года, в частности, в языке появились открытые массивы, давшие возможность использовать одни и те же процедуры для обработки одномерных массивов различных размеров.",9
4,"Язык программирования Си отличается минимализмом. Авторы языка хотели, чтобы программы на нём легко компилировались с помощью однопроходного компилятора, чтобы каждой элементарной составляющей программы после компиляции соответствовало весьма небольшое число машинных команд, а использование базовых элементов языка не задействовало библиотеку времени выполнения. Однопроходный компилятор компилирует программу, не возвращаясь назад к уже обработанному тексту, поэтому использованию функций и переменных должно предшествовать их объявление. Код на Си можно легко писать на низком уровне абстракции, почти как на ассемблере. Иногда Си называют «универсальным ассемблером» или «ассемблером высокого уровня», что отражает различие языков ассемблера для разных платформ и единство стандарта Си, код которого может быть скомпилирован без изменений практически на любой модели компьютера. Си часто называют языком среднего уровня или даже низкого уровня, учитывая то, как близко он работает к реальным устройствам. Однако в строгой классификации он является языком высокого уровня.",0
4,"Язык программирования Си отличается минимализмом. Авторы языка хотели, чтобы программы на нём легко компилировались с помощью однопроходного компилятора, чтобы каждой элементарной составляющей программы после компиляции соответствовало весьма небольшое число машинных команд, а использование базовых элементов языка не задействовало библиотеку времени выполнения. Однопроходный компилятор компилирует программу, не возвращаясь назад к уже обработанному тексту, поэтому использованию функций и переменных должно предшествовать их объявление. Код на Си можно легко писать на низком уровне абстракции, почти как на ассемблере. Иногда Си называют «универсальным ассемблером» или «ассемблером высокого уровня», что отражает различие языков ассемблера для разных платформ и единство стандарта Си, код которого может быть скомпилирован без изменений практически на любой модели компьютера. Си часто называют языком среднего уровня или даже низкого уровня, учитывая то, как близко он работает к реальным устройствам. Однако в строгой классификации он является языком высокого уровня.",1
4,"Язык программирования Си отличается минимализмом. Авторы языка хотели, чтобы программы на нём легко компилировались с помощью однопроходного компилятора, чтобы каждой элементарной составляющей программы после компиляции соответствовало весьма небольшое число машинных команд, а использование базовых элементов языка не задействовало библиотеку времени выполнения. Однопроходный компилятор компилирует программу, не возвращаясь назад к уже обработанному тексту, поэтому использованию функций и переменных должно предшествовать их объявление. Код на Си можно легко писать на низком уровне абстракции, почти как на ассемблере. Иногда Си называют «универсальным ассемблером» или «ассемблером высокого уровня», что отражает различие языков ассемблера для разных платформ и единство стандарта Си, код которого может быть скомпилирован без изменений практически на любой модели компьютера. Си часто называют языком среднего уровня или даже низкого уровня, учитывая то, как близко он работает к реальным устройствам. Однако в строгой классификации он является языком высокого уровня.",2
4,"Язык программирования Си отличается минимализмом. Авторы языка хотели, чтобы программы на нём легко компилировались с помощью однопроходного компилятора, чтобы каждой элементарной составляющей программы после компиляции соответствовало весьма небольшое число машинных команд, а использование базовых элементов языка не задействовало библиотеку времени выполнения. Однопроходный компилятор компилирует программу, не возвращаясь назад к уже обработанному тексту, поэтому использованию функций и переменных должно предшествовать их объявление. Код на Си можно легко писать на низком уровне абстракции, почти как на ассемблере. Иногда Си называют «универсальным ассемблером» или «ассемблером высокого уровня», что отражает различие языков ассемблера для разных платформ и единство стандарта Си, код которого может быть скомпилирован без изменений практически на любой модели компьютера. Си часто называют языком среднего уровня или даже низкого уровня, учитывая то, как близко он работает к реальным устройствам. Однако в строгой классификации он является языком высокого уровня.",3
4,"Язык программирования Си отличается минимализмом. Авторы языка хотели, чтобы программы на нём легко компилировались с помощью однопроходного компилятора, чтобы каждой элементарной составляющей программы после компиляции соответствовало весьма небольшое число машинных команд, а использование базовых элементов языка не задействовало библиотеку времени выполнения. Однопроходный компилятор компилирует программу, не возвращаясь назад к уже обработанному тексту, поэтому использованию функций и переменных должно предшествовать их объявление. Код на Си можно легко писать на низком уровне абстракции, почти как на ассемблере. Иногда Си называют «универсальным ассемблером» или «ассемблером высокого уровня», что отражает различие языков ассемблера для разных платформ и единство стандарта Си, код которого может быть скомпилирован без изменений практически на любой модели компьютера. Си часто называют языком среднего уровня или даже низкого уровня, учитывая то, как близко он работает к реальным устройствам. Однако в строгой классификации он является языком высокого уровня.",5
4,"Язык программирования Си отличается минимализмом. Авторы языка хотели, чтобы программы на нём легко компилировались с помощью однопроходного компилятора, чтобы каждой элементарной составляющей программы после компиляции соответствовало весьма небольшое число машинных команд, а использование базовых элементов языка не задействовало библиотеку времени выполнения. Однопроходный компилятор компилирует программу, не возвращаясь назад к уже обработанному тексту, поэтому использованию функций и переменных должно предшествовать их объявление. Код на Си можно легко писать на низком уровне абстракции, почти как на ассемблере. Иногда Си называют «универсальным ассемблером» или «ассемблером высокого уровня», что отражает различие языков ассемблера для разных платформ и единство стандарта Си, код которого может быть скомпилирован без изменений практически на любой модели компьютера. Си часто называют языком среднего уровня или даже низкого уровня, учитывая то, как близко он работает к реальным устройствам. Однако в строгой классификации он является языком высокого уровня.",6
4,"Язык программирования Си отличается минимализмом. Авторы языка хотели, чтобы программы на нём легко компилировались с помощью однопроходного компилятора, чтобы каждой элементарной составляющей программы после компиляции соответствовало весьма небольшое число машинных команд, а использование базовых элементов языка не задействовало библиотеку времени выполнения. Однопроходный компилятор компилирует программу, не возвращаясь назад к уже обработанному тексту, поэтому использованию функций и переменных должно предшествовать их объявление. Код на Си можно легко писать на низком уровне абстракции, почти как на ассемблере. Иногда Си называют «универсальным ассемблером» или «ассемблером высокого уровня», что отражает различие языков ассемблера для разных платформ и единство стандарта Си, код которого может быть скомпилирован без изменений практически на любой модели компьютера. Си часто называют языком среднего уровня или даже низкого уровня, учитывая то, как близко он работает к реальным устройствам. Однако в строгой классификации он является языком высокого уровня.",7
4,"Язык программирования Си отличается минимализмом. Авторы языка хотели, чтобы программы на нём легко компилировались с помощью однопроходного компилятора, чтобы каждой элементарной составляющей программы после компиляции соответствовало весьма небольшое число машинных команд, а использование базовых элементов языка не задействовало библиотеку времени выполнения. Однопроходный компилятор компилирует программу, не возвращаясь назад к уже обработанному тексту, поэтому использованию функций и переменных должно предшествовать их объявление. Код на Си можно легко писать на низком уровне абстракции, почти как на ассемблере. Иногда Си называют «универсальным ассемблером» или «ассемблером высокого уровня», что отражает различие языков ассемблера для разных платформ и единство стандарта Си, код которого может быть скомпилирован без изменений практически на любой модели компьютера. Си часто называют языком среднего уровня или даже низкого уровня, учитывая то, как близко он работает к реальным устройствам. Однако в строгой классификации он является языком высокого уровня.",8
4,"Язык программирования Си отличается минимализмом. Авторы языка хотели, чтобы программы на нём легко компилировались с помощью однопроходного компилятора, чтобы каждой элементарной составляющей программы после компиляции соответствовало весьма небольшое число машинных команд, а использование базовых элементов языка не задействовало библиотеку времени выполнения. Однопроходный компилятор компилирует программу, не возвращаясь назад к уже обработанному тексту, поэтому использованию функций и переменных должно предшествовать их объявление. Код на Си можно легко писать на низком уровне абстракции, почти как на ассемблере. Иногда Си называют «универсальным ассемблером» или «ассемблером высокого уровня», что отражает различие языков ассемблера для разных платформ и единство стандарта Си, код которого может быть скомпилирован без изменений практически на любой модели компьютера. Си часто называют языком среднего уровня или даже низкого уровня, учитывая то, как близко он работает к реальным устройствам. Однако в строгой классификации он является языком высокого уровня.",9
5,"Python поддерживает несколько парадигм программирования, в том числе структурное, объектно-ориентированное, функциональное, императивное и аспектно-ориентированное. Основные архитектурные черты — динамическая типизация, автоматическое управление памятью, полная интроспекция, механизм обработки исключений, поддержка многопоточных вычислений и удобные высокоуровневые структуры данных. Код в Python организовывается в функции и классы, которые могут объединяться в модули (они в свою очередь могут быть объединены в пакеты). Эталонной реализацией Python является интерпретатор CPython, поддерживающий большинство активно используемых платформ. Он распространяется под свободной лицензией Python Software Foundation License, позволяющей использовать его без ограничений в любых приложениях, включая проприетарные. Есть реализации интерпретаторов для JVM (с возможностью компиляции), MSIL (с возможностью компиляции), LLVM и других. Проект PyPy предлагает реализацию Python с использованием JIT-компиляции, которая значительно увеличивает скорость выполнения Python-программ.",0
5,"Python поддерживает несколько парадигм программирования, в том числе структурное, объектно-ориентированное, функциональное, императивное и аспектно-ориентированное. Основные архитектурные черты — динамическая типизация, автоматическое управление памятью, полная интроспекция, механизм обработки исключений, поддержка многопоточных вычислений и удобные высокоуровневые структуры данных. Код в Python организовывается в функции и классы, которые могут объединяться в модули (они в свою очередь могут быть объединены в пакеты). Эталонной реализацией Python является интерпретатор CPython, поддерживающий большинство активно используемых платформ. Он распространяется под свободной лицензией Python Software Foundation License, позволяющей использовать его без ограничений в любых приложениях, включая проприетарные. Есть реализации интерпретаторов для JVM (с возможностью компиляции), MSIL (с возможностью компиляции), LLVM и других. Проект PyPy предлагает реализацию Python с использованием JIT-компиляции, которая значительно увеличивает скорость выполнения Python-программ.",1
5,"Python поддерживает несколько парадигм программирования, в том числе структурное, объектно-ориентированное, функциональное, императивное и аспектно-ориентированное. Основные архитектурные черты — динамическая типизация, автоматическое управление памятью, полная интроспекция, механизм обработки исключений, поддержка многопоточных вычислений и удобные высокоуровневые структуры данных. Код в Python организовывается в функции и классы, которые могут объединяться в модули (они в свою очередь могут быть объединены в пакеты). Эталонной реализацией Python является интерпретатор CPython, поддерживающий большинство активно используемых платформ. Он распространяется под свободной лицензией Python Software Foundation License, позволяющей использовать его без ограничений в любых приложениях, включая проприетарные. Есть реализации интерпретаторов для JVM (с возможностью компиляции), MSIL (с возможностью компиляции), LLVM и других. Проект PyPy предлагает реализацию Python с использованием JIT-компиляции, которая значительно увеличивает скорость выполнения Python-программ.",2
5,"Python поддерживает несколько парадигм программирования, в том числе структурное, объектно-ориентированное, функциональное, императивное и аспектно-ориентированное. Основные архитектурные черты — динамическая типизация, автоматическое управление памятью, полная интроспекция, механизм обработки исключений, поддержка многопоточных вычислений и удобные высокоуровневые структуры данных. Код в Python организовывается в функции и классы, которые могут объединяться в модули (они в свою очередь могут быть объединены в пакеты). Эталонной реализацией Python является интерпретатор CPython, поддерживающий большинство активно используемых платформ. Он распространяется под свободной лицензией Python Software Foundation License, позволяющей использовать его без ограничений в любых приложениях, включая проприетарные. Есть реализации интерпретаторов для JVM (с возможностью компиляции), MSIL (с возможностью компиляции), LLVM и других. Проект PyPy предлагает реализацию Python с использованием JIT-компиляции, которая значительно увеличивает скорость выполнения Python-программ.",3
5,"Python поддерживает несколько парадигм программирования, в том числе структурное, объектно-ориентированное, функциональное, императивное и аспектно-ориентированное. Основные архитектурные черты — динамическая типизация, автоматическое управление памятью, полная интроспекция, механизм обработки исключений, поддержка многопоточных вычислений и удобные высокоуровневые структуры данных. Код в Python организовывается в функции и классы, которые могут объединяться в модули (они в свою очередь могут быть объединены в пакеты). Эталонной реализацией Python является интерпретатор CPython, поддерживающий большинство активно используемых платформ. Он распространяется под свободной лицензией Python Software Foundation License, позволяющей использовать его без ограничений в любых приложениях, включая проприетарные. Есть реализации интерпретаторов для JVM (с возможностью компиляции), MSIL (с возможностью компиляции), LLVM и других. Проект PyPy предлагает реализацию Python с использованием JIT-компиляции, которая значительно увеличивает скорость выполнения Python-программ.",4
5,"Python поддерживает несколько парадигм программирования, в том числе структурное, объектно-ориентированное, функциональное, императивное и аспектно-ориентированное. Основные архитектурные черты — динамическая типизация, автоматическое управление памятью, полная интроспекция, механизм обработки исключений, поддержка многопоточных вычислений и удобные высокоуровневые структуры данных. Код в Python организовывается в функции и классы, которые могут объединяться в модули (они в свою очередь могут быть объединены в пакеты). Эталонной реализацией Python является интерпретатор CPython, поддерживающий большинство активно используемых платформ. Он распространяется под свободной лицензией Python Software Foundation License, позволяющей использовать его без ограничений в любых приложениях, включая проприетарные. Есть реализации интерпретаторов для JVM (с возможностью компиляции), MSIL (с возможностью компиляции), LLVM и других. Проект PyPy предлагает реализацию Python с использованием JIT-компиляции, которая значительно увеличивает скорость выполнения Python-программ.",6
5,"Python поддерживает несколько парадигм программирования, в том числе структурное, объектно-ориентированное, функциональное, императивное и аспектно-ориентированное. Основные архитектурные черты — динамическая типизация, автоматическое управление памятью, полная интроспекция, механизм обработки исключений, поддержка многопоточных вычислений и удобные высокоуровневые структуры данных. Код в Python организовывается в функции и классы, которые могут объединяться в модули (они в свою очередь могут быть объединены в пакеты). Эталонной реализацией Python является интерпретатор CPython, поддерживающий большинство активно используемых платформ. Он распространяется под свободной лицензией Python Software Foundation License, позволяющей использовать его без ограничений в любых приложениях, включая проприетарные. Есть реализации интерпретаторов для JVM (с возможностью компиляции), MSIL (с возможностью компиляции), LLVM и других. Проект PyPy предлагает реализацию Python с использованием JIT-компиляции, которая значительно увеличивает скорость выполнения Python-программ.",7
5,"Python поддерживает несколько парадигм программирования, в том числе структурное, объектно-ориентированное, функциональное, императивное и аспектно-ориентированное. Основные архитектурные черты — динамическая типизация, автоматическое управление памятью, полная интроспекция, механизм обработки исключений, поддержка многопоточных вычислений и удобные высокоуровневые структуры данных. Код в Python организовывается в функции и классы, которые могут объединяться в модули (они в свою очередь могут быть объединены в пакеты). Эталонной реализацией Python является интерпретатор CPython, поддерживающий большинство активно используемых платформ. Он распространяется под свободной лицензией Python Software Foundation License, позволяющей использовать его без ограничений в любых приложениях, включая проприетарные. Есть реализации интерпретаторов для JVM (с возможностью компиляции), MSIL (с возможностью компиляции), LLVM и других. Проект PyPy предлагает реализацию Python с использованием JIT-компиляции, которая значительно увеличивает скорость выполнения Python-программ.",8
5,"Python поддерживает несколько парадигм программирования, в том числе структурное, объектно-ориентированное, функциональное, императивное и аспектно-ориентированное. Основные архитектурные черты — динамическая типизация, автоматическое управление памятью, полная интроспекция, механизм обработки исключений, поддержка многопоточных вычислений и удобные высокоуровневые структуры данных. Код в Python организовывается в функции и классы, которые могут объединяться в модули (они в свою очередь могут быть объединены в пакеты). Эталонной реализацией Python является интерпретатор CPython, поддерживающий большинство активно используемых платформ. Он распространяется под свободной лицензией Python Software Foundation License, позволяющей использовать его без ограничений в любых приложениях, включая проприетарные. Есть реализации интерпретаторов для JVM (с возможностью компиляции), MSIL (с возможностью компиляции), LLVM и других. Проект PyPy предлагает реализацию Python с использованием JIT-компиляции, которая значительно увеличивает скорость выполнения Python-программ.",9
6,"Kotlin — это статически типизированный язык программирования, работающий поверх JVM и разрабатываемый компанией JetBrains. Компилируется в JavaScript, а также на другие платформы через инфраструктуру LLVM. Язык назван в честь острова Котлин в Финском заливе, на котором расположен город Кронштадт.
Авторы ставили целью создать язык более лаконичный и типобезопасный, чем Java, и более простой, чем Scala. Следствием упрощения по сравнению со Scala стали также более быстрая компиляция и лучшая поддержка языка в IDE. Язык полностью совместим с Java, что позволяет java-разработчикам постепенно перейти к его использованию; в частности, в Android язык встраивается с помощью Gradle, что позволяет для существующего android-приложения внедрять новые функции на Kotlin без переписывания приложения целиком.",0
6,"Kotlin — это статически типизированный язык программирования, работающий поверх JVM и разрабатываемый компанией JetBrains. Компилируется в JavaScript, а также на другие платформы через инфраструктуру LLVM. Язык назван в честь острова Котлин в Финском заливе, на котором расположен город Кронштадт.
Авторы ставили целью создать язык более лаконичный и типобезопасный, чем Java, и более простой, чем Scala. Следствием упрощения по сравнению со Scala стали также более быстрая компиляция и лучшая поддержка языка в IDE. Язык полностью совместим с Java, что позволяет java-разработчикам постепенно перейти к его использованию; в частности, в Android язык встраивается с помощью Gradle, что позволяет для существующего android-приложения внедрять новые функции на Kotlin без переписывания приложения целиком.",1
6,"Kotlin — это статически типизированный язык программирования, работающий поверх JVM и разрабатываемый компанией JetBrains. Компилируется в JavaScript, а также на другие платформы через инфраструктуру LLVM. Язык назван в честь острова Котлин в Финском заливе, на котором расположен город Кронштадт.
Авторы ставили целью создать язык более лаконичный и типобезопасный, чем Java, и более простой, чем Scala. Следствием упрощения по сравнению со Scala стали также более быстрая компиляция и лучшая поддержка языка в IDE. Язык полностью совместим с Java, что позволяет java-разработчикам постепенно перейти к его использованию; в частности, в Android язык встраивается с помощью Gradle, что позволяет для существующего android-приложения внедрять новые функции на Kotlin без переписывания приложения целиком.",2
6,"Kotlin — это статически типизированный язык программирования, работающий поверх JVM и разрабатываемый компанией JetBrains. Компилируется в JavaScript, а также на другие платформы через инфраструктуру LLVM. Язык назван в честь острова Котлин в Финском заливе, на котором расположен город Кронштадт.
Авторы ставили целью создать язык более лаконичный и типобезопасный, чем Java, и более простой, чем Scala. Следствием упрощения по сравнению со Scala стали также более быстрая компиляция и лучшая поддержка языка в IDE. Язык полностью совместим с Java, что позволяет java-разработчикам постепенно перейти к его использованию; в частности, в Android язык встраивается с помощью Gradle, что позволяет для существующего android-приложения внедрять новые функции на Kotlin без переписывания приложения целиком.",3
6,"Kotlin — это статически типизированный язык программирования, работающий поверх JVM и разрабатываемый компанией JetBrains. Компилируется в JavaScript, а также на другие платформы через инфраструктуру LLVM. Язык назван в честь острова Котлин в Финском заливе, на котором расположен город Кронштадт.
Авторы ставили целью создать язык более лаконичный и типобезопасный, чем Java, и более простой, чем Scala. Следствием упрощения по сравнению со Scala стали также более быстрая компиляция и лучшая поддержка языка в IDE. Язык полностью совместим с Java, что позволяет java-разработчикам постепенно перейти к его использованию; в частности, в Android язык встраивается с помощью Gradle, что позволяет для существующего android-приложения внедрять новые функции на Kotlin без переписывания приложения целиком.",4
6,"Kotlin — это статически типизированный язык программирования, работающий поверх JVM и разрабатываемый компанией JetBrains. Компилируется в JavaScript, а также на другие платформы через инфраструктуру LLVM. Язык назван в честь острова Котлин в Финском заливе, на котором расположен город Кронштадт.
Авторы ставили целью создать язык более лаконичный и типобезопасный, чем Java, и более простой, чем Scala. Следствием упрощения по сравнению со Scala стали также более быстрая компиляция и лучшая поддержка языка в IDE. Язык полностью совместим с Java, что позволяет java-разработчикам постепенно перейти к его использованию; в частности, в Android язык встраивается с помощью Gradle, что позволяет для существующего android-приложения внедрять новые функции на Kotlin без переписывания приложения целиком.",5
6,"Kotlin — это статически типизированный язык программирования, работающий поверх JVM и разрабатываемый компанией JetBrains. Компилируется в JavaScript, а также на другие платформы через инфраструктуру LLVM. Язык назван в честь острова Котлин в Финском заливе, на котором расположен город Кронштадт.
Авторы ставили целью создать язык более лаконичный и типобезопасный, чем Java, и более простой, чем Scala. Следствием упрощения по сравнению со Scala стали также более быстрая компиляция и лучшая поддержка языка в IDE. Язык полностью совместим с Java, что позволяет java-разработчикам постепенно перейти к его использованию; в частности, в Android язык встраивается с помощью Gradle, что позволяет для существующего android-приложения внедрять новые функции на Kotlin без переписывания приложения целиком.",7
6,"Kotlin — это статически типизированный язык программирования, работающий поверх JVM и разрабатываемый компанией JetBrains. Компилируется в JavaScript, а также на другие платформы через инфраструктуру LLVM. Язык назван в честь острова Котлин в Финском заливе, на котором расположен город Кронштадт.
Авторы ставили целью создать язык более лаконичный и типобезопасный, чем Java, и более простой, чем Scala. Следствием упрощения по сравнению со Scala стали также более быстрая компиляция и лучшая поддержка языка в IDE. Язык полностью совместим с Java, что позволяет java-разработчикам постепенно перейти к его использованию; в частности, в Android язык встраивается с помощью Gradle, что позволяет для существующего android-приложения внедрять новые функции на Kotlin без переписывания приложения целиком.",8
6,"Kotlin — это статически типизированный язык программирования, работающий поверх JVM и разрабатываемый компанией JetBrains. Компилируется в JavaScript, а также на другие платформы через инфраструктуру LLVM. Язык назван в честь острова Котлин в Финском заливе, на котором расположен город Кронштадт.
Авторы ставили целью создать язык более лаконичный и типобезопасный, чем Java, и более простой, чем Scala. Следствием упрощения по сравнению со Scala стали также более быстрая компиляция и лучшая поддержка языка в IDE. Язык полностью совместим с Java, что позволяет java-разработчикам постепенно перейти к его использованию; в частности, в Android язык встраивается с помощью Gradle, что позволяет для существующего android-приложения внедрять новые функции на Kotlin без переписывания приложения целиком.",9
7,"Scala-программы во многом похожи на Java-программы, и могут свободно взаимодействовать с Java-кодом. Язык включает единообразную объектную модель — в том смысле, что любое значение является объектом, а любая операция — вызовом метода. При этом является также функциональным языком в том смысле, что функции — это полноправные значения. В Scala включены мощные и единообразные концепции абстракций как для типов, так и для значений. В частности, язык содержит гибкие симметричные конструкции примесей для композиции классов и типажей. Возможно позволяет производить декомпозицию объектов путём сравнения с образцом; образцы и выражения при этом были обобщены для поддержки естественной обработки XML-документов. В целом, эти конструкции позволяют легко выражать самостоятельные компоненты, использующие библиотеки Scala, не пользуясь специальными языковыми конструкциями. Язык допускает внешние расширения компонентов с использованием представлений (views). Возможности обобщённого программирования реализуются за счёт поддержки обобщённых функций (generics), в том числе высшего типажа (generics of a higher kind). Кроме различных классических структурных типов данных, в язык включена поддержка экзистенциальных типов.",0
7,"Scala-программы во многом похожи на Java-программы, и могут свободно взаимодействовать с Java-кодом. Язык включает единообразную объектную модель — в том смысле, что любое значение является объектом, а любая операция — вызовом метода. При этом является также функциональным языком в том смысле, что функции — это полноправные значения. В Scala включены мощные и единообразные концепции абстракций как для типов, так и для значений. В частности, язык содержит гибкие симметричные конструкции примесей для композиции классов и типажей. Возможно позволяет производить декомпозицию объектов путём сравнения с образцом; образцы и выражения при этом были обобщены для поддержки естественной обработки XML-документов. В целом, эти конструкции позволяют легко выражать самостоятельные компоненты, использующие библиотеки Scala, не пользуясь специальными языковыми конструкциями. Язык допускает внешние расширения компонентов с использованием представлений (views). Возможности обобщённого программирования реализуются за счёт поддержки обобщённых функций (generics), в том числе высшего типажа (generics of a higher kind). Кроме различных классических структурных типов данных, в язык включена поддержка экзистенциальных типов.",1
7,"Scala-программы во многом похожи на Java-программы, и могут свободно взаимодействовать с Java-кодом. Язык включает единообразную объектную модель — в том смысле, что любое значение является объектом, а любая операция — вызовом метода. При этом является также функциональным языком в том смысле, что функции — это полноправные значения. В Scala включены мощные и единообразные концепции абстракций как для типов, так и для значений. В частности, язык содержит гибкие симметричные конструкции примесей для композиции классов и типажей. Возможно позволяет производить декомпозицию объектов путём сравнения с образцом; образцы и выражения при этом были обобщены для поддержки естественной обработки XML-документов. В целом, эти конструкции позволяют легко выражать самостоятельные компоненты, использующие библиотеки Scala, не пользуясь специальными языковыми конструкциями. Язык допускает внешние расширения компонентов с использованием представлений (views). Возможности обобщённого программирования реализуются за счёт поддержки обобщённых функций (generics), в том числе высшего типажа (generics of a higher kind). Кроме различных классических структурных типов данных, в язык включена поддержка экзистенциальных типов.",2
7,"Scala-программы во многом похожи на Java-программы, и могут свободно взаимодействовать с Java-кодом. Язык включает единообразную объектную модель — в том смысле, что любое значение является объектом, а любая операция — вызовом метода. При этом является также функциональным языком в том смысле, что функции — это полноправные значения. В Scala включены мощные и единообразные концепции абстракций как для типов, так и для значений. В частности, язык содержит гибкие симметричные конструкции примесей для композиции классов и типажей. Возможно позволяет производить декомпозицию объектов путём сравнения с образцом; образцы и выражения при этом были обобщены для поддержки естественной обработки XML-документов. В целом, эти конструкции позволяют легко выражать самостоятельные компоненты, использующие библиотеки Scala, не пользуясь специальными языковыми конструкциями. Язык допускает внешние расширения компонентов с использованием представлений (views). Возможности обобщённого программирования реализуются за счёт поддержки обобщённых функций (generics), в том числе высшего типажа (generics of a higher kind). Кроме различных классических структурных типов данных, в язык включена поддержка экзистенциальных типов.",3
7,"Scala-программы во многом похожи на Java-программы, и могут свободно взаимодействовать с Java-кодом. Язык включает единообразную объектную модель — в том смысле, что любое значение является объектом, а любая операция — вызовом метода. При этом является также функциональным языком в том смысле, что функции — это полноправные значения. В Scala включены мощные и единообразные концепции абстракций как для типов, так и для значений. В частности, язык содержит гибкие симметричные конструкции примесей для композиции классов и типажей. Возможно позволяет производить декомпозицию объектов путём сравнения с образцом; образцы и выражения при этом были обобщены для поддержки естественной обработки XML-документов. В целом, эти конструкции позволяют легко выражать самостоятельные компоненты, использующие библиотеки Scala, не пользуясь специальными языковыми конструкциями. Язык допускает внешние расширения компонентов с использованием представлений (views). Возможности обобщённого программирования реализуются за счёт поддержки обобщённых функций (generics), в том числе высшего типажа (generics of a higher kind). Кроме различных классических структурных типов данных, в язык включена поддержка экзистенциальных типов.",4
7,"Scala-программы во многом похожи на Java-программы, и могут свободно взаимодействовать с Java-кодом. Язык включает единообразную объектную модель — в том смысле, что любое значение является объектом, а любая операция — вызовом метода. При этом является также функциональным языком в том смысле, что функции — это полноправные значения. В Scala включены мощные и единообразные концепции абстракций как для типов, так и для значений. В частности, язык содержит гибкие симметричные конструкции примесей для композиции классов и типажей. Возможно позволяет производить декомпозицию объектов путём сравнения с образцом; образцы и выражения при этом были обобщены для поддержки естественной обработки XML-документов. В целом, эти конструкции позволяют легко выражать самостоятельные компоненты, использующие библиотеки Scala, не пользуясь специальными языковыми конструкциями. Язык допускает внешние расширения компонентов с использованием представлений (views). Возможности обобщённого программирования реализуются за счёт поддержки обобщённых функций (generics), в том числе высшего типажа (generics of a higher kind). Кроме различных классических структурных типов данных, в язык включена поддержка экзистенциальных типов.",5
7,"Scala-программы во многом похожи на Java-программы, и могут свободно взаимодействовать с Java-кодом. Язык включает единообразную объектную модель — в том смысле, что любое значение является объектом, а любая операция — вызовом метода. При этом является также функциональным языком в том смысле, что функции — это полноправные значения. В Scala включены мощные и единообразные концепции абстракций как для типов, так и для значений. В частности, язык содержит гибкие симметричные конструкции примесей для композиции классов и типажей. Возможно позволяет производить декомпозицию объектов путём сравнения с образцом; образцы и выражения при этом были обобщены для поддержки естественной обработки XML-документов. В целом, эти конструкции позволяют легко выражать самостоятельные компоненты, использующие библиотеки Scala, не пользуясь специальными языковыми конструкциями. Язык допускает внешние расширения компонентов с использованием представлений (views). Возможности обобщённого программирования реализуются за счёт поддержки обобщённых функций (generics), в том числе высшего типажа (generics of a higher kind). Кроме различных классических структурных типов данных, в язык включена поддержка экзистенциальных типов.",6
7,"Scala-программы во многом похожи на Java-программы, и могут свободно взаимодействовать с Java-кодом. Язык включает единообразную объектную модель — в том смысле, что любое значение является объектом, а любая операция — вызовом метода. При этом является также функциональным языком в том смысле, что функции — это полноправные значения. В Scala включены мощные и единообразные концепции абстракций как для типов, так и для значений. В частности, язык содержит гибкие симметричные конструкции примесей для композиции классов и типажей. Возможно позволяет производить декомпозицию объектов путём сравнения с образцом; образцы и выражения при этом были обобщены для поддержки естественной обработки XML-документов. В целом, эти конструкции позволяют легко выражать самостоятельные компоненты, использующие библиотеки Scala, не пользуясь специальными языковыми конструкциями. Язык допускает внешние расширения компонентов с использованием представлений (views). Возможности обобщённого программирования реализуются за счёт поддержки обобщённых функций (generics), в том числе высшего типажа (generics of a higher kind). Кроме различных классических структурных типов данных, в язык включена поддержка экзистенциальных типов.",8
7,"Scala-программы во многом похожи на Java-программы, и могут свободно взаимодействовать с Java-кодом. Язык включает единообразную объектную модель — в том смысле, что любое значение является объектом, а любая операция — вызовом метода. При этом является также функциональным языком в том смысле, что функции — это полноправные значения. В Scala включены мощные и единообразные концепции абстракций как для типов, так и для значений. В частности, язык содержит гибкие симметричные конструкции примесей для композиции классов и типажей. Возможно позволяет производить декомпозицию объектов путём сравнения с образцом; образцы и выражения при этом были обобщены для поддержки естественной обработки XML-документов. В целом, эти конструкции позволяют легко выражать самостоятельные компоненты, использующие библиотеки Scala, не пользуясь специальными языковыми конструкциями. Язык допускает внешние расширения компонентов с использованием представлений (views). Возможности обобщённого программирования реализуются за счёт поддержки обобщённых функций (generics), в том числе высшего типажа (generics of a higher kind). Кроме различных классических структурных типов данных, в язык включена поддержка экзистенциальных типов.",9
8,"JavaScript — мультипарадигменный язык программирования. Поддерживает объектно-ориентированный, императивный и функциональный стили. JavaScript обычно используется как встраиваемый язык для программного доступа к объектам приложений. Наиболее широкое применение находит в браузерах как язык сценариев для придания интерактивности веб-страницам. Основные архитектурные черты: динамическая типизация, слабая типизация, автоматическое управление памятью, прототипное программирование, функции как объекты первого класса. На JavaScript оказали влияние многие языки, при разработке была цель сделать язык похожим на Java, но при этом лёгким для использования непрограммистами. Языком JavaScript не владеет какая-либо компания или организация, что отличает его от ряда языков программирования, используемых в веб-разработке. Название «JavaScript» является зарегистрированным товарным знаком компании Oracle Corporation в США.",0
8,"JavaScript — мультипарадигменный язык программирования. Поддерживает объектно-ориентированный, императивный и функциональный стили. JavaScript обычно используется как встраиваемый язык для программного доступа к объектам приложений. Наиболее широкое применение находит в браузерах как язык сценариев для придания интерактивности веб-страницам. Основные архитектурные черты: динамическая типизация, слабая типизация, автоматическое управление памятью, прототипное программирование, функции как объекты первого класса. На JavaScript оказали влияние многие языки, при разработке была цель сделать язык похожим на Java, но при этом лёгким для использования непрограммистами. Языком JavaScript не владеет какая-либо компания или организация, что отличает его от ряда языков программирования, используемых в веб-разработке. Название «JavaScript» является зарегистрированным товарным знаком компании Oracle Corporation в США.",1
8,"JavaScript — мультипарадигменный язык программирования. Поддерживает объектно-ориентированный, императивный и функциональный стили. JavaScript обычно используется как встраиваемый язык для программного доступа к объектам приложений. Наиболее широкое применение находит в браузерах как язык сценариев для придания интерактивности веб-страницам. Основные архитектурные черты: динамическая типизация, слабая типизация, автоматическое управление памятью, прототипное программирование, функции как объекты первого класса. На JavaScript оказали влияние многие языки, при разработке была цель сделать язык похожим на Java, но при этом лёгким для использования непрограммистами. Языком JavaScript не владеет какая-либо компания или организация, что отличает его от ряда языков программирования, используемых в веб-разработке. Название «JavaScript» является зарегистрированным товарным знаком компании Oracle Corporation в США.",2
8,"JavaScript — мультипарадигменный язык программирования. Поддерживает объектно-ориентированный, императивный и функциональный стили. JavaScript обычно используется как встраиваемый язык для программного доступа к объектам приложений. Наиболее широкое применение находит в браузерах как язык сценариев для придания интерактивности веб-страницам. Основные архитектурные черты: динамическая типизация, слабая типизация, автоматическое управление памятью, прототипное программирование, функции как объекты первого класса. На JavaScript оказали влияние многие языки, при разработке была цель сделать язык похожим на Java, но при этом лёгким для использования непрограммистами. Языком JavaScript не владеет какая-либо компания или организация, что отличает его от ряда языков программирования, используемых в веб-разработке. Название «JavaScript» является зарегистрированным товарным знаком компании Oracle Corporation в США.",3
8,"JavaScript — мультипарадигменный язык программирования. Поддерживает объектно-ориентированный, императивный и функциональный стили. JavaScript обычно используется как встраиваемый язык для программного доступа к объектам приложений. Наиболее широкое применение находит в браузерах как язык сценариев для придания интерактивности веб-страницам. Основные архитектурные черты: динамическая типизация, слабая типизация, автоматическое управление памятью, прототипное программирование, функции как объекты первого класса. На JavaScript оказали влияние многие языки, при разработке была цель сделать язык похожим на Java, но при этом лёгким для использования непрограммистами. Языком JavaScript не владеет какая-либо компания или организация, что отличает его от ряда языков программирования, используемых в веб-разработке. Название «JavaScript» является зарегистрированным товарным знаком компании Oracle Corporation в США.",4
8,"JavaScript — мультипарадигменный язык программирования. Поддерживает объектно-ориентированный, императивный и функциональный стили. JavaScript обычно используется как встраиваемый язык для программного доступа к объектам приложений. Наиболее широкое применение находит в браузерах как язык сценариев для придания интерактивности веб-страницам. Основные архитектурные черты: динамическая типизация, слабая типизация, автоматическое управление памятью, прототипное программирование, функции как объекты первого класса. На JavaScript оказали влияние многие языки, при разработке была цель сделать язык похожим на Java, но при этом лёгким для использования непрограммистами. Языком JavaScript не владеет какая-либо компания или организация, что отличает его от ряда языков программирования, используемых в веб-разработке. Название «JavaScript» является зарегистрированным товарным знаком компании Oracle Corporation в США.",5
8,"JavaScript — мультипарадигменный язык программирования. Поддерживает объектно-ориентированный, императивный и функциональный стили. JavaScript обычно используется как встраиваемый язык для программного доступа к объектам приложений. Наиболее широкое применение находит в браузерах как язык сценариев для придания интерактивности веб-страницам. Основные архитектурные черты: динамическая типизация, слабая типизация, автоматическое управление памятью, прототипное программирование, функции как объекты первого класса. На JavaScript оказали влияние многие языки, при разработке была цель сделать язык похожим на Java, но при этом лёгким для использования непрограммистами. Языком JavaScript не владеет какая-либо компания или организация, что отличает его от ряда языков программирования, используемых в веб-разработке. Название «JavaScript» является зарегистрированным товарным знаком компании Oracle Corporation в США.",6
8,"JavaScript — мультипарадигменный язык программирования. Поддерживает объектно-ориентированный, императивный и функциональный стили. JavaScript обычно используется как встраиваемый язык для программного доступа к объектам приложений. Наиболее широкое применение находит в браузерах как язык сценариев для придания интерактивности веб-страницам. Основные архитектурные черты: динамическая типизация, слабая типизация, автоматическое управление памятью, прототипное программирование, функции как объекты первого класса. На JavaScript оказали влияние многие языки, при разработке была цель сделать язык похожим на Java, но при этом лёгким для использования непрограммистами. Языком JavaScript не владеет какая-либо компания или организация, что отличает его от ряда языков программирования, используемых в веб-разработке. Название «JavaScript» является зарегистрированным товарным знаком компании Oracle Corporation в США.",7
8,"JavaScript — мультипарадигменный язык программирования. Поддерживает объектно-ориентированный, императивный и функциональный стили. JavaScript обычно используется как встраиваемый язык для программного доступа к объектам приложений. Наиболее широкое применение находит в браузерах как язык сценариев для придания интерактивности веб-страницам. Основные архитектурные черты: динамическая типизация, слабая типизация, автоматическое управление памятью, прототипное программирование, функции как объекты первого класса. На JavaScript оказали влияние многие языки, при разработке была цель сделать язык похожим на Java, но при этом лёгким для использования непрограммистами. Языком JavaScript не владеет какая-либо компания или организация, что отличает его от ряда языков программирования, используемых в веб-разработке. Название «JavaScript» является зарегистрированным товарным знаком компании Oracle Corporation в США.",9
9,"В языке Objective-C для обозначения объектов используется специальный тип id (это аналог типа Object в Java). Переменная типа id фактически является указателем на произвольный объект. Для обозначения нулевого указателя на объект используется константа nil (= NULL). При этом вместо id можно использовать и более привычное обозначение с явным указанием класса. В частности последнее позволяет компилятору осуществлять некоторую проверку поддержки сообщения объектами — если компилятор из типа переменной не может сделать вывод о поддержке объектом данного сообщения, то он выдаст предупреждение. Тем самым язык поддерживает проверку типов, но в нестрогой форме (то есть найденные несоответствия возвращаются как предупреждения, а не ошибки).",0
9,"В языке Objective-C для обозначения объектов используется специальный тип id (это аналог типа Object в Java). Переменная типа id фактически является указателем на произвольный объект. Для обозначения нулевого указателя на объект используется константа nil (= NULL). При этом вместо id можно использовать и более привычное обозначение с явным указанием класса. В частности последнее позволяет компилятору осуществлять некоторую проверку поддержки сообщения объектами — если компилятор из типа переменной не может сделать вывод о поддержке объектом данного сообщения, то он выдаст предупреждение. Тем самым язык поддерживает проверку типов, но в нестрогой форме (то есть найденные несоответствия возвращаются как предупреждения, а не ошибки).",1
9,"В языке Objective-C для обозначения объектов используется специальный тип id (это аналог типа Object в Java). Переменная типа id фактически является указателем на произвольный объект. Для обозначения нулевого указателя на объект используется константа nil (= NULL). При этом вместо id можно использовать и более привычное обозначение с явным указанием класса. В частности последнее позволяет компилятору осуществлять некоторую проверку поддержки сообщения объектами — если компилятор из типа переменной не может сделать вывод о поддержке объектом данного сообщения, то он выдаст предупреждение. Тем самым язык поддерживает проверку типов, но в нестрогой форме (то есть найденные несоответствия возвращаются как предупреждения, а не ошибки).",2
9,"В языке Objective-C для обозначения объектов используется специальный тип id (это аналог типа Object в Java). Переменная типа id фактически является указателем на произвольный объект. Для обозначения нулевого указателя на объект используется константа nil (= NULL). При этом вместо id можно использовать и более привычное обозначение с явным указанием класса. В частности последнее позволяет компилятору осуществлять некоторую проверку поддержки сообщения объектами — если компилятор из типа переменной не может сделать вывод о поддержке объектом данного сообщения, то он выдаст предупреждение. Тем самым язык поддерживает проверку типов, но в нестрогой форме (то есть найденные несоответствия возвращаются как предупреждения, а не ошибки).",3
9,"В языке Objective-C для обозначения объектов используется специальный тип id (это аналог типа Object в Java). Переменная типа id фактически является указателем на произвольный объект. Для обозначения нулевого указателя на объект используется константа nil (= NULL). При этом вместо id можно использовать и более привычное обозначение с явным указанием класса. В частности последнее позволяет компилятору осуществлять некоторую проверку поддержки сообщения объектами — если компилятор из типа переменной не может сделать вывод о поддержке объектом данного сообщения, то он выдаст предупреждение. Тем самым язык поддерживает проверку типов, но в нестрогой форме (то есть найденные несоответствия возвращаются как предупреждения, а не ошибки).",4
9,"В языке Objective-C для обозначения объектов используется специальный тип id (это аналог типа Object в Java). Переменная типа id фактически является указателем на произвольный объект. Для обозначения нулевого указателя на объект используется константа nil (= NULL). При этом вместо id можно использовать и более привычное обозначение с явным указанием класса. В частности последнее позволяет компилятору осуществлять некоторую проверку поддержки сообщения объектами — если компилятор из типа переменной не может сделать вывод о поддержке объектом данного сообщения, то он выдаст предупреждение. Тем самым язык поддерживает проверку типов, но в нестрогой форме (то есть найденные несоответствия возвращаются как предупреждения, а не ошибки).",5
9,"В языке Objective-C для обозначения объектов используется специальный тип id (это аналог типа Object в Java). Переменная типа id фактически является указателем на произвольный объект. Для обозначения нулевого указателя на объект используется константа nil (= NULL). При этом вместо id можно использовать и более привычное обозначение с явным указанием класса. В частности последнее позволяет компилятору осуществлять некоторую проверку поддержки сообщения объектами — если компилятор из типа переменной не может сделать вывод о поддержке объектом данного сообщения, то он выдаст предупреждение. Тем самым язык поддерживает проверку типов, но в нестрогой форме (то есть найденные несоответствия возвращаются как предупреждения, а не ошибки).",6
9,"В языке Objective-C для обозначения объектов используется специальный тип id (это аналог типа Object в Java). Переменная типа id фактически является указателем на произвольный объект. Для обозначения нулевого указателя на объект используется константа nil (= NULL). При этом вместо id можно использовать и более привычное обозначение с явным указанием класса. В частности последнее позволяет компилятору осуществлять некоторую проверку поддержки сообщения объектами — если компилятор из типа переменной не может сделать вывод о поддержке объектом данного сообщения, то он выдаст предупреждение. Тем самым язык поддерживает проверку типов, но в нестрогой форме (то есть найденные несоответствия возвращаются как предупреждения, а не ошибки).",7
9,"В языке Objective-C для обозначения объектов используется специальный тип id (это аналог типа Object в Java). Переменная типа id фактически является указателем на произвольный объект. Для обозначения нулевого указателя на объект используется константа nil (= NULL). При этом вместо id можно использовать и более привычное обозначение с явным указанием класса. В частности последнее позволяет компилятору осуществлять некоторую проверку поддержки сообщения объектами — если компилятор из типа переменной не может сделать вывод о поддержке объектом данного сообщения, то он выдаст предупреждение. Тем самым язык поддерживает проверку типов, но в нестрогой форме (то есть найденные несоответствия возвращаются как предупреждения, а не ошибки).",8
10,"Атропин, а также ряд других центральных холинолитиков содержатся в целом ряде широко распространенных растений — дурмане, белене, красавке и др. Издавна была известна способность этих растений (их листьев, стеблей, плодов) как в натуральном виде, так и в форме отваров, настоев, вытяжек вызывать психические расстройства. Первые сведения об этих эффектах применения растительных препаратов восходят к временам античности, где широко был известен психодислептический (галлюциногенный) эффект употребления данной группы растений. В древние времена этот эффект использовался главным образом в религиозно-мистических целях: различные религиозные церемонии, магические действия и др. Имеющиеся описания античных авторов религиозного центра древней Греции — храма Аполлона в Дельфах — содержат сведения о прорицательницах этого храма — дельфийских пифиях, которые, употребляя в специальных церемониях настой красавки, приводили себя в состояние атропиновой интоксикации: у них резко изменялся тембр голоса, бледнели кожные покровы, отмечался выраженный мидриаз. Это делало пророчества пифий (а они обычно отвечали на вопросы посетителей храма об их будущем, удаче в делах, торговых сделках, путешествиях и т. п.) таинственными, загадочными, доступными для произвольного толкования вследствие своей неопределенности и отсутствия связи с контекстом вопроса.",11
10,"Атропин, а также ряд других центральных холинолитиков содержатся в целом ряде широко распространенных растений — дурмане, белене, красавке и др. Издавна была известна способность этих растений (их листьев, стеблей, плодов) как в натуральном виде, так и в форме отваров, настоев, вытяжек вызывать психические расстройства. Первые сведения об этих эффектах применения растительных препаратов восходят к временам античности, где широко был известен психодислептический (галлюциногенный) эффект употребления данной группы растений. В древние времена этот эффект использовался главным образом в религиозно-мистических целях: различные религиозные церемонии, магические действия и др. Имеющиеся описания античных авторов религиозного центра древней Греции — храма Аполлона в Дельфах — содержат сведения о прорицательницах этого храма — дельфийских пифиях, которые, употребляя в специальных церемониях настой красавки, приводили себя в состояние атропиновой интоксикации: у них резко изменялся тембр голоса, бледнели кожные покровы, отмечался выраженный мидриаз. Это делало пророчества пифий (а они обычно отвечали на вопросы посетителей храма об их будущем, удаче в делах, торговых сделках, путешествиях и т. п.) таинственными, загадочными, доступными для произвольного толкования вследствие своей неопределенности и отсутствия связи с контекстом вопроса.",12
10,"Атропин, а также ряд других центральных холинолитиков содержатся в целом ряде широко распространенных растений — дурмане, белене, красавке и др. Издавна была известна способность этих растений (их листьев, стеблей, плодов) как в натуральном виде, так и в форме отваров, настоев, вытяжек вызывать психические расстройства. Первые сведения об этих эффектах применения растительных препаратов восходят к временам античности, где широко был известен психодислептический (галлюциногенный) эффект употребления данной группы растений. В древние времена этот эффект использовался главным образом в религиозно-мистических целях: различные религиозные церемонии, магические действия и др. Имеющиеся описания античных авторов религиозного центра древней Греции — храма Аполлона в Дельфах — содержат сведения о прорицательницах этого храма — дельфийских пифиях, которые, употребляя в специальных церемониях настой красавки, приводили себя в состояние атропиновой интоксикации: у них резко изменялся тембр голоса, бледнели кожные покровы, отмечался выраженный мидриаз. Это делало пророчества пифий (а они обычно отвечали на вопросы посетителей храма об их будущем, удаче в делах, торговых сделках, путешествиях и т. п.) таинственными, загадочными, доступными для произвольного толкования вследствие своей неопределенности и отсутствия связи с контекстом вопроса.",13
10,"Атропин, а также ряд других центральных холинолитиков содержатся в целом ряде широко распространенных растений — дурмане, белене, красавке и др. Издавна была известна способность этих растений (их листьев, стеблей, плодов) как в натуральном виде, так и в форме отваров, настоев, вытяжек вызывать психические расстройства. Первые сведения об этих эффектах применения растительных препаратов восходят к временам античности, где широко был известен психодислептический (галлюциногенный) эффект употребления данной группы растений. В древние времена этот эффект использовался главным образом в религиозно-мистических целях: различные религиозные церемонии, магические действия и др. Имеющиеся описания античных авторов религиозного центра древней Греции — храма Аполлона в Дельфах — содержат сведения о прорицательницах этого храма — дельфийских пифиях, которые, употребляя в специальных церемониях настой красавки, приводили себя в состояние атропиновой интоксикации: у них резко изменялся тембр голоса, бледнели кожные покровы, отмечался выраженный мидриаз. Это делало пророчества пифий (а они обычно отвечали на вопросы посетителей храма об их будущем, удаче в делах, торговых сделках, путешествиях и т. п.) таинственными, загадочными, доступными для произвольного толкования вследствие своей неопределенности и отсутствия связи с контекстом вопроса.",14
10,"Атропин, а также ряд других центральных холинолитиков содержатся в целом ряде широко распространенных растений — дурмане, белене, красавке и др. Издавна была известна способность этих растений (их листьев, стеблей, плодов) как в натуральном виде, так и в форме отваров, настоев, вытяжек вызывать психические расстройства. Первые сведения об этих эффектах применения растительных препаратов восходят к временам античности, где широко был известен психодислептический (галлюциногенный) эффект употребления данной группы растений. В древние времена этот эффект использовался главным образом в религиозно-мистических целях: различные религиозные церемонии, магические действия и др. Имеющиеся описания античных авторов религиозного центра древней Греции — храма Аполлона в Дельфах — содержат сведения о прорицательницах этого храма — дельфийских пифиях, которые, употребляя в специальных церемониях настой красавки, приводили себя в состояние атропиновой интоксикации: у них резко изменялся тембр голоса, бледнели кожные покровы, отмечался выраженный мидриаз. Это делало пророчества пифий (а они обычно отвечали на вопросы посетителей храма об их будущем, удаче в делах, торговых сделках, путешествиях и т. п.) таинственными, загадочными, доступными для произвольного толкования вследствие своей неопределенности и отсутствия связи с контекстом вопроса.",15
10,"Атропин, а также ряд других центральных холинолитиков содержатся в целом ряде широко распространенных растений — дурмане, белене, красавке и др. Издавна была известна способность этих растений (их листьев, стеблей, плодов) как в натуральном виде, так и в форме отваров, настоев, вытяжек вызывать психические расстройства. Первые сведения об этих эффектах применения растительных препаратов восходят к временам античности, где широко был известен психодислептический (галлюциногенный) эффект употребления данной группы растений. В древние времена этот эффект использовался главным образом в религиозно-мистических целях: различные религиозные церемонии, магические действия и др. Имеющиеся описания античных авторов религиозного центра древней Греции — храма Аполлона в Дельфах — содержат сведения о прорицательницах этого храма — дельфийских пифиях, которые, употребляя в специальных церемониях настой красавки, приводили себя в состояние атропиновой интоксикации: у них резко изменялся тембр голоса, бледнели кожные покровы, отмечался выраженный мидриаз. Это делало пророчества пифий (а они обычно отвечали на вопросы посетителей храма об их будущем, удаче в делах, торговых сделках, путешествиях и т. п.) таинственными, загадочными, доступными для произвольного толкования вследствие своей неопределенности и отсутствия связи с контекстом вопроса.",16
10,"Атропин, а также ряд других центральных холинолитиков содержатся в целом ряде широко распространенных растений — дурмане, белене, красавке и др. Издавна была известна способность этих растений (их листьев, стеблей, плодов) как в натуральном виде, так и в форме отваров, настоев, вытяжек вызывать психические расстройства. Первые сведения об этих эффектах применения растительных препаратов восходят к временам античности, где широко был известен психодислептический (галлюциногенный) эффект употребления данной группы растений. В древние времена этот эффект использовался главным образом в религиозно-мистических целях: различные религиозные церемонии, магические действия и др. Имеющиеся описания античных авторов религиозного центра древней Греции — храма Аполлона в Дельфах — содержат сведения о прорицательницах этого храма — дельфийских пифиях, которые, употребляя в специальных церемониях настой красавки, приводили себя в состояние атропиновой интоксикации: у них резко изменялся тембр голоса, бледнели кожные покровы, отмечался выраженный мидриаз. Это делало пророчества пифий (а они обычно отвечали на вопросы посетителей храма об их будущем, удаче в делах, торговых сделках, путешествиях и т. п.) таинственными, загадочными, доступными для произвольного толкования вследствие своей неопределенности и отсутствия связи с контекстом вопроса.",17
10,"Атропин, а также ряд других центральных холинолитиков содержатся в целом ряде широко распространенных растений — дурмане, белене, красавке и др. Издавна была известна способность этих растений (их листьев, стеблей, плодов) как в натуральном виде, так и в форме отваров, настоев, вытяжек вызывать психические расстройства. Первые сведения об этих эффектах применения растительных препаратов восходят к временам античности, где широко был известен психодислептический (галлюциногенный) эффект употребления данной группы растений. В древние времена этот эффект использовался главным образом в религиозно-мистических целях: различные религиозные церемонии, магические действия и др. Имеющиеся описания античных авторов религиозного центра древней Греции — храма Аполлона в Дельфах — содержат сведения о прорицательницах этого храма — дельфийских пифиях, которые, употребляя в специальных церемониях настой красавки, приводили себя в состояние атропиновой интоксикации: у них резко изменялся тембр голоса, бледнели кожные покровы, отмечался выраженный мидриаз. Это делало пророчества пифий (а они обычно отвечали на вопросы посетителей храма об их будущем, удаче в делах, торговых сделках, путешествиях и т. п.) таинственными, загадочными, доступными для произвольного толкования вследствие своей неопределенности и отсутствия связи с контекстом вопроса.",18
10,"Атропин, а также ряд других центральных холинолитиков содержатся в целом ряде широко распространенных растений — дурмане, белене, красавке и др. Издавна была известна способность этих растений (их листьев, стеблей, плодов) как в натуральном виде, так и в форме отваров, настоев, вытяжек вызывать психические расстройства. Первые сведения об этих эффектах применения растительных препаратов восходят к временам античности, где широко был известен психодислептический (галлюциногенный) эффект употребления данной группы растений. В древние времена этот эффект использовался главным образом в религиозно-мистических целях: различные религиозные церемонии, магические действия и др. Имеющиеся описания античных авторов религиозного центра древней Греции — храма Аполлона в Дельфах — содержат сведения о прорицательницах этого храма — дельфийских пифиях, которые, употребляя в специальных церемониях настой красавки, приводили себя в состояние атропиновой интоксикации: у них резко изменялся тембр голоса, бледнели кожные покровы, отмечался выраженный мидриаз. Это делало пророчества пифий (а они обычно отвечали на вопросы посетителей храма об их будущем, удаче в делах, торговых сделках, путешествиях и т. п.) таинственными, загадочными, доступными для произвольного толкования вследствие своей неопределенности и отсутствия связи с контекстом вопроса.",19
11,"К настоящему времени трудами главным образом польских и отечественных исследователей выработана определенная техника проведения атропиновой комы. Для атропинокоматозной терапии не требуется ни специального помещения, ни какой-либо аппаратуры или дополнительного оборудования. Терапию проводят в обычной больничной палате, окна которой несколько затеняют на время проведения атропинокоматозной терапии. Атропиновые комы вызываются обычно через день — 3 раза в неделю.",10
11,"К настоящему времени трудами главным образом польских и отечественных исследователей выработана определенная техника проведения атропиновой комы. Для атропинокоматозной терапии не требуется ни специального помещения, ни какой-либо аппаратуры или дополнительного оборудования. Терапию проводят в обычной больничной палате, окна которой несколько затеняют на время проведения атропинокоматозной терапии. Атропиновые комы вызываются обычно через день — 3 раза в неделю.",12
11,"К настоящему времени трудами главным образом польских и отечественных исследователей выработана определенная техника проведения атропиновой комы. Для атропинокоматозной терапии не требуется ни специального помещения, ни какой-либо аппаратуры или дополнительного оборудования. Терапию проводят в обычной больничной палате, окна которой несколько затеняют на время проведения атропинокоматозной терапии. Атропиновые комы вызываются обычно через день — 3 раза в неделю.",13
11,"К настоящему времени трудами главным образом польских и отечественных исследователей выработана определенная техника проведения атропиновой комы. Для атропинокоматозной терапии не требуется ни специального помещения, ни какой-либо аппаратуры или дополнительного оборудования. Терапию проводят в обычной больничной палате, окна которой несколько затеняют на время проведения атропинокоматозной терапии. Атропиновые комы вызываются обычно через день — 3 раза в неделю.",14
11,"К настоящему времени трудами главным образом польских и отечественных исследователей выработана определенная техника проведения атропиновой комы. Для атропинокоматозной терапии не требуется ни специального помещения, ни какой-либо аппаратуры или дополнительного оборудования. Терапию проводят в обычной больничной палате, окна которой несколько затеняют на время проведения атропинокоматозной терапии. Атропиновые комы вызываются обычно через день — 3 раза в неделю.",15
11,"К настоящему времени трудами главным образом польских и отечественных исследователей выработана определенная техника проведения атропиновой комы. Для атропинокоматозной терапии не требуется ни специального помещения, ни какой-либо аппаратуры или дополнительного оборудования. Терапию проводят в обычной больничной палате, окна которой несколько затеняют на время проведения атропинокоматозной терапии. Атропиновые комы вызываются обычно через день — 3 раза в неделю.",16
11,"К настоящему времени трудами главным образом польских и отечественных исследователей выработана определенная техника проведения атропиновой комы. Для атропинокоматозной терапии не требуется ни специального помещения, ни какой-либо аппаратуры или дополнительного оборудования. Терапию проводят в обычной больничной палате, окна которой несколько затеняют на время проведения атропинокоматозной терапии. Атропиновые комы вызываются обычно через день — 3 раза в неделю.",17
11,"К настоящему времени трудами главным образом польских и отечественных исследователей выработана определенная техника проведения атропиновой комы. Для атропинокоматозной терапии не требуется ни специального помещения, ни какой-либо аппаратуры или дополнительного оборудования. Терапию проводят в обычной больничной палате, окна которой несколько затеняют на время проведения атропинокоматозной терапии. Атропиновые комы вызываются обычно через день — 3 раза в неделю.",18
11,"К настоящему времени трудами главным образом польских и отечественных исследователей выработана определенная техника проведения атропиновой комы. Для атропинокоматозной терапии не требуется ни специального помещения, ни какой-либо аппаратуры или дополнительного оборудования. Терапию проводят в обычной больничной палате, окна которой несколько затеняют на время проведения атропинокоматозной терапии. Атропиновые комы вызываются обычно через день — 3 раза в неделю.",19
12,"Операция удаления зуба является основной в работе амбулаторного хирурга стоматолога. Несмотря на кажущуюся простоту и легкость вмешательства необходимо помнить,что удаление зуба только тогда проходит без осложнений, когда врач хорошо знает особенности строения отдельных групп зубов и челюстей, в совершенстве владеет техникой операции соблюдает все ее этапы.",10
12,"Операция удаления зуба является основной в работе амбулаторного хирурга стоматолога. Несмотря на кажущуюся простоту и легкость вмешательства необходимо помнить,что удаление зуба только тогда проходит без осложнений, когда врач хорошо знает особенности строения отдельных групп зубов и челюстей, в совершенстве владеет техникой операции соблюдает все ее этапы.",11
12,"Операция удаления зуба является основной в работе амбулаторного хирурга стоматолога. Несмотря на кажущуюся простоту и легкость вмешательства необходимо помнить,что удаление зуба только тогда проходит без осложнений, когда врач хорошо знает особенности строения отдельных групп зубов и челюстей, в совершенстве владеет техникой операции соблюдает все ее этапы.",13
12,"Операция удаления зуба является основной в работе амбулаторного хирурга стоматолога. Несмотря на кажущуюся простоту и легкость вмешательства необходимо помнить,что удаление зуба только тогда проходит без осложнений, когда врач хорошо знает особенности строения отдельных групп зубов и челюстей, в совершенстве владеет техникой операции соблюдает все ее этапы.",14
12,"Операция удаления зуба является основной в работе амбулаторного хирурга стоматолога. Несмотря на кажущуюся простоту и легкость вмешательства необходимо помнить,что удаление зуба только тогда проходит без осложнений, когда врач хорошо знает особенности строения отдельных групп зубов и челюстей, в совершенстве владеет техникой операции соблюдает все ее этапы.",15
12,"Операция удаления зуба является основной в работе амбулаторного хирурга стоматолога. Несмотря на кажущуюся простоту и легкость вмешательства необходимо помнить,что удаление зуба только тогда проходит без осложнений, когда врач хорошо знает особенности строения отдельных групп зубов и челюстей, в совершенстве владеет техникой операции соблюдает все ее этапы.",16
12,"Операция удаления зуба является основной в работе амбулаторного хирурга стоматолога. Несмотря на кажущуюся простоту и легкость вмешательства необходимо помнить,что удаление зуба только тогда проходит без осложнений, когда врач хорошо знает особенности строения отдельных групп зубов и челюстей, в совершенстве владеет техникой операции соблюдает все ее этапы.",17
12,"Операция удаления зуба является основной в работе амбулаторного хирурга стоматолога. Несмотря на кажущуюся простоту и легкость вмешательства необходимо помнить,что удаление зуба только тогда проходит без осложнений, когда врач хорошо знает особенности строения отдельных групп зубов и челюстей, в совершенстве владеет техникой операции соблюдает все ее этапы.",18
12,"Операция удаления зуба является основной в работе амбулаторного хирурга стоматолога. Несмотря на кажущуюся простоту и легкость вмешательства необходимо помнить,что удаление зуба только тогда проходит без осложнений, когда врач хорошо знает особенности строения отдельных групп зубов и челюстей, в совершенстве владеет техникой операции соблюдает все ее этапы.",19
13,"Многие болезни позвоночника можно не только лечить, но и избежать. Остеохондроз, протрузии, грыжи – самые распространенные недуги, а физиопроцедуры и массаж далеко не всегда помогают улучшить состояние. Но избавиться от болей в спине вполне возможно, притом без астрономических расходов. Человеческое тело строением похоже на машину: выход из строя одного компонента ведет к неисправности остальных систем. Сам по себе позвоночник играет роль стержневого механизма, вокруг которого находится большинство жизненно важных органов.",10
13,"Многие болезни позвоночника можно не только лечить, но и избежать. Остеохондроз, протрузии, грыжи – самые распространенные недуги, а физиопроцедуры и массаж далеко не всегда помогают улучшить состояние. Но избавиться от болей в спине вполне возможно, притом без астрономических расходов. Человеческое тело строением похоже на машину: выход из строя одного компонента ведет к неисправности остальных систем. Сам по себе позвоночник играет роль стержневого механизма, вокруг которого находится большинство жизненно важных органов.",11
13,"Многие болезни позвоночника можно не только лечить, но и избежать. Остеохондроз, протрузии, грыжи – самые распространенные недуги, а физиопроцедуры и массаж далеко не всегда помогают улучшить состояние. Но избавиться от болей в спине вполне возможно, притом без астрономических расходов. Человеческое тело строением похоже на машину: выход из строя одного компонента ведет к неисправности остальных систем. Сам по себе позвоночник играет роль стержневого механизма, вокруг которого находится большинство жизненно важных органов.",12
13,"Многие болезни позвоночника можно не только лечить, но и избежать. Остеохондроз, протрузии, грыжи – самые распространенные недуги, а физиопроцедуры и массаж далеко не всегда помогают улучшить состояние. Но избавиться от болей в спине вполне возможно, притом без астрономических расходов. Человеческое тело строением похоже на машину: выход из строя одного компонента ведет к неисправности остальных систем. Сам по себе позвоночник играет роль стержневого механизма, вокруг которого находится большинство жизненно важных органов.",14
13,"Многие болезни позвоночника можно не только лечить, но и избежать. Остеохондроз, протрузии, грыжи – самые распространенные недуги, а физиопроцедуры и массаж далеко не всегда помогают улучшить состояние. Но избавиться от болей в спине вполне возможно, притом без астрономических расходов. Человеческое тело строением похоже на машину: выход из строя одного компонента ведет к неисправности остальных систем. Сам по себе позвоночник играет роль стержневого механизма, вокруг которого находится большинство жизненно важных органов.",15
13,"Многие болезни позвоночника можно не только лечить, но и избежать. Остеохондроз, протрузии, грыжи – самые распространенные недуги, а физиопроцедуры и массаж далеко не всегда помогают улучшить состояние. Но избавиться от болей в спине вполне возможно, притом без астрономических расходов. Человеческое тело строением похоже на машину: выход из строя одного компонента ведет к неисправности остальных систем. Сам по себе позвоночник играет роль стержневого механизма, вокруг которого находится большинство жизненно важных органов.",16
13,"Многие болезни позвоночника можно не только лечить, но и избежать. Остеохондроз, протрузии, грыжи – самые распространенные недуги, а физиопроцедуры и массаж далеко не всегда помогают улучшить состояние. Но избавиться от болей в спине вполне возможно, притом без астрономических расходов.
Человеческое тело строением похоже на машину: выход из строя одного компонента ведет к неисправности остальных систем. Сам по себе позвоночник играет роль стержневого механизма, вокруг которого находится большинство жизненно важных органов.",17
13,"Многие болезни позвоночника можно не только лечить, но и избежать. Остеохондроз, протрузии, грыжи – самые распространенные недуги, а физиопроцедуры и массаж далеко не всегда помогают улучшить состояние. Но избавиться от болей в спине вполне возможно, притом без астрономических расходов. Человеческое тело строением похоже на машину: выход из строя одного компонента ведет к неисправности остальных систем. Сам по себе позвоночник играет роль стержневого механизма, вокруг которого находится большинство жизненно важных органов.",18
13,"Многие болезни позвоночника можно не только лечить, но и избежать. Остеохондроз, протрузии, грыжи – самые распространенные недуги, а физиопроцедуры и массаж далеко не всегда помогают улучшить состояние. Но избавиться от болей в спине вполне возможно, притом без астрономических расходов. Человеческое тело строением похоже на машину: выход из строя одного компонента ведет к неисправности остальных систем. Сам по себе позвоночник играет роль стержневого механизма, вокруг которого находится большинство жизненно важных органов.",19
14,"Острота зрения (V, visus) — это способность раздельно видеть два близко расположенных друг к другу объекта. За норму остроты зрения принята величина разрешающего угла в одну угловую минуту. В этих условиях расстояние между отраженными точками на сетчатке приблизительно равно 0,002—0,005 мм, что соответствует диаметру членика колбочки. Острота зрения определяется специальными таблицами с рядом букв, цифр или прерванных колец черного цвета на белом фоне. Слева от каждого ряда имеется отметка расстояния (как правило, отмечается литерой «D»), с которого штрих знака расположен в одну угловую минуту и он отчетливо виден, при условии нормальной остроты зрения. Справа литерой «V» отмечена непосредственно острота зрения.",10
14,"Острота зрения (V, visus) — это способность раздельно видеть два близко расположенных друг к другу объекта. За норму остроты зрения принята величина разрешающего угла в одну угловую минуту. В этих условиях расстояние между отраженными точками на сетчатке приблизительно равно 0,002—0,005 мм, что соответствует диаметру членика колбочки. Острота зрения определяется специальными таблицами с рядом букв, цифр или прерванных колец черного цвета на белом фоне. Слева от каждого ряда имеется отметка расстояния (как правило, отмечается литерой «D»), с которого штрих знака расположен в одну угловую минуту и он отчетливо виден, при условии нормальной остроты зрения. Справа литерой «V» отмечена непосредственно острота зрения.",11
14,"Острота зрения (V, visus) — это способность раздельно видеть два близко расположенных друг к другу объекта. За норму остроты зрения принята величина разрешающего угла в одну угловую минуту. В этих условиях расстояние между отраженными точками на сетчатке приблизительно равно 0,002—0,005 мм, что соответствует диаметру членика колбочки. Острота зрения определяется специальными таблицами с рядом букв, цифр или прерванных колец черного цвета на белом фоне. Слева от каждого ряда имеется отметка расстояния (как правило, отмечается литерой «D»), с которого штрих знака расположен в одну угловую минуту и он отчетливо виден, при условии нормальной остроты зрения. Справа литерой «V» отмечена непосредственно острота зрения.",12
14,"Острота зрения (V, visus) — это способность раздельно видеть два близко расположенных друг к другу объекта. За норму остроты зрения принята величина разрешающего угла в одну угловую минуту. В этих условиях расстояние между отраженными точками на сетчатке приблизительно равно 0,002—0,005 мм, что соответствует диаметру членика колбочки. Острота зрения определяется специальными таблицами с рядом букв, цифр или прерванных колец черного цвета на белом фоне. Слева от каждого ряда имеется отметка расстояния (как правило, отмечается литерой «D»), с которого штрих знака расположен в одну угловую минуту и он отчетливо виден, при условии нормальной остроты зрения. Справа литерой «V» отмечена непосредственно острота зрения.",13
14,"Острота зрения (V, visus) — это способность раздельно видеть два близко расположенных друг к другу объекта. За норму остроты зрения принята величина разрешающего угла в одну угловую минуту. В этих условиях расстояние между отраженными точками на сетчатке приблизительно равно 0,002—0,005 мм, что соответствует диаметру членика колбочки. Острота зрения определяется специальными таблицами с рядом букв, цифр или прерванных колец черного цвета на белом фоне. Слева от каждого ряда имеется отметка расстояния (как правило, отмечается литерой «D»), с которого штрих знака расположен в одну угловую минуту и он отчетливо виден, при условии нормальной остроты зрения. Справа литерой «V» отмечена непосредственно острота зрения.",15
14,"Острота зрения (V, visus) — это способность раздельно видеть два близко расположенных друг к другу объекта. За норму остроты зрения принята величина разрешающего угла в одну угловую минуту. В этих условиях расстояние между отраженными точками на сетчатке приблизительно равно 0,002—0,005 мм, что соответствует диаметру членика колбочки. Острота зрения определяется специальными таблицами с рядом букв, цифр или прерванных колец черного цвета на белом фоне. Слева от каждого ряда имеется отметка расстояния (как правило, отмечается литерой «D»), с которого штрих знака расположен в одну угловую минуту и он отчетливо виден, при условии нормальной остроты зрения. Справа литерой «V» отмечена непосредственно острота зрения.",16
14,"Острота зрения (V, visus) — это способность раздельно видеть два близко расположенных друг к другу объекта. За норму остроты зрения принята величина разрешающего угла в одну угловую минуту. В этих условиях расстояние между отраженными точками на сетчатке приблизительно равно 0,002—0,005 мм, что соответствует диаметру членика колбочки. Острота зрения определяется специальными таблицами с рядом букв, цифр или прерванных колец черного цвета на белом фоне. Слева от каждого ряда имеется отметка расстояния (как правило, отмечается литерой «D»), с которого штрих знака расположен в одну угловую минуту и он отчетливо виден, при условии нормальной остроты зрения. Справа литерой «V» отмечена непосредственно острота зрения.",17
14,"Острота зрения (V, visus) — это способность раздельно видеть два близко расположенных друг к другу объекта. За норму остроты зрения принята величина разрешающего угла в одну угловую минуту. В этих условиях расстояние между отраженными точками на сетчатке приблизительно равно 0,002—0,005 мм, что соответствует диаметру членика колбочки. Острота зрения определяется специальными таблицами с рядом букв, цифр или прерванных колец черного цвета на белом фоне. Слева от каждого ряда имеется отметка расстояния (как правило, отмечается литерой «D»), с которого штрих знака расположен в одну угловую минуту и он отчетливо виден, при условии нормальной остроты зрения. Справа литерой «V» отмечена непосредственно острота зрения.",18
14,"Острота зрения (V, visus) — это способность раздельно видеть два близко расположенных друг к другу объекта. За норму остроты зрения принята величина разрешающего угла в одну угловую минуту. В этих условиях расстояние между отраженными точками на сетчатке приблизительно равно 0,002—0,005 мм, что соответствует диаметру членика колбочки. Острота зрения определяется специальными таблицами с рядом букв, цифр или прерванных колец черного цвета на белом фоне. Слева от каждого ряда имеется отметка расстояния (как правило, отмечается литерой «D»), с которого штрих знака расположен в одну угловую минуту и он отчетливо виден, при условии нормальной остроты зрения. Справа литерой «V» отмечена непосредственно острота зрения.",19
15,"Гипоталамо-гипофизарная аменорея возникает при различных заболеваниях гипоталамо-гипофизарной системы. В зависимости от степени недостаточности гипофиза наблюдается различная степень анатомического недоразвития и функциональной недостаточности яичников, а следовательно, и различная степень изменений в миометрии и эндометрии. Поражение гипофиза может сопровождаться первичной или вторичной аменореей. Аменорея яичниковая наблюдается при недостаточности функции яичников или при полной ее отсутствии. В организме таких женщин мало фолликулярных гормонов и в начале заболевания увеличено количество гонадотропных гормонов. Если происходит созревание фолликула, а желтое тело не образуется и овуляции нет, то возникает полигормональная (фолликулиногенная) аменорея, которая сменяется обильным кровотечением.",10
15,"Гипоталамо-гипофизарная аменорея возникает при различных заболеваниях гипоталамо-гипофизарной системы. В зависимости от степени недостаточности гипофиза наблюдается различная степень анатомического недоразвития и функциональной недостаточности яичников, а следовательно, и различная степень изменений в миометрии и эндометрии. Поражение гипофиза может сопровождаться первичной или вторичной аменореей. Аменорея яичниковая наблюдается при недостаточности функции яичников или при полной ее отсутствии. В организме таких женщин мало фолликулярных гормонов и в начале заболевания увеличено количество гонадотропных гормонов. Если происходит созревание фолликула, а желтое тело не образуется и овуляции нет, то возникает полигормональная (фолликулиногенная) аменорея, которая сменяется обильным кровотечением.",11
15,"Гипоталамо-гипофизарная аменорея возникает при различных заболеваниях гипоталамо-гипофизарной системы. В зависимости от степени недостаточности гипофиза наблюдается различная степень анатомического недоразвития и функциональной недостаточности яичников, а следовательно, и различная степень изменений в миометрии и эндометрии. Поражение гипофиза может сопровождаться первичной или вторичной аменореей. Аменорея яичниковая наблюдается при недостаточности функции яичников или при полной ее отсутствии. В организме таких женщин мало фолликулярных гормонов и в начале заболевания увеличено количество гонадотропных гормонов. Если происходит созревание фолликула, а желтое тело не образуется и овуляции нет, то возникает полигормональная (фолликулиногенная) аменорея, которая сменяется обильным кровотечением.",12
15,"Гипоталамо-гипофизарная аменорея возникает при различных заболеваниях гипоталамо-гипофизарной системы. В зависимости от степени недостаточности гипофиза наблюдается различная степень анатомического недоразвития и функциональной недостаточности яичников, а следовательно, и различная степень изменений в миометрии и эндометрии. Поражение гипофиза может сопровождаться первичной или вторичной аменореей. Аменорея яичниковая наблюдается при недостаточности функции яичников или при полной ее отсутствии. В организме таких женщин мало фолликулярных гормонов и в начале заболевания увеличено количество гонадотропных гормонов. Если происходит созревание фолликула, а желтое тело не образуется и овуляции нет, то возникает полигормональная (фолликулиногенная) аменорея, которая сменяется обильным кровотечением.",13
15,"Гипоталамо-гипофизарная аменорея возникает при различных заболеваниях гипоталамо-гипофизарной системы. В зависимости от степени недостаточности гипофиза наблюдается различная степень анатомического недоразвития и функциональной недостаточности яичников, а следовательно, и различная степень изменений в миометрии и эндометрии. Поражение гипофиза может сопровождаться первичной или вторичной аменореей. Аменорея яичниковая наблюдается при недостаточности функции яичников или при полной ее отсутствии. В организме таких женщин мало фолликулярных гормонов и в начале заболевания увеличено количество гонадотропных гормонов. Если происходит созревание фолликула, а желтое тело не образуется и овуляции нет, то возникает полигормональная (фолликулиногенная) аменорея, которая сменяется обильным кровотечением.",14
15,"Гипоталамо-гипофизарная аменорея возникает при различных заболеваниях гипоталамо-гипофизарной системы. В зависимости от степени недостаточности гипофиза наблюдается различная степень анатомического недоразвития и функциональной недостаточности яичников, а следовательно, и различная степень изменений в миометрии и эндометрии. Поражение гипофиза может сопровождаться первичной или вторичной аменореей. Аменорея яичниковая наблюдается при недостаточности функции яичников или при полной ее отсутствии. В организме таких женщин мало фолликулярных гормонов и в начале заболевания увеличено количество гонадотропных гормонов. Если происходит созревание фолликула, а желтое тело не образуется и овуляции нет, то возникает полигормональная (фолликулиногенная) аменорея, которая сменяется обильным кровотечением.",16
15,"Гипоталамо-гипофизарная аменорея возникает при различных заболеваниях гипоталамо-гипофизарной системы. В зависимости от степени недостаточности гипофиза наблюдается различная степень анатомического недоразвития и функциональной недостаточности яичников, а следовательно, и различная степень изменений в миометрии и эндометрии. Поражение гипофиза может сопровождаться первичной или вторичной аменореей. Аменорея яичниковая наблюдается при недостаточности функции яичников или при полной ее отсутствии. В организме таких женщин мало фолликулярных гормонов и в начале заболевания увеличено количество гонадотропных гормонов. Если происходит созревание фолликула, а желтое тело не образуется и овуляции нет, то возникает полигормональная (фолликулиногенная) аменорея, которая сменяется обильным кровотечением.",17
15,"Гипоталамо-гипофизарная аменорея возникает при различных заболеваниях гипоталамо-гипофизарной системы. В зависимости от степени недостаточности гипофиза наблюдается различная степень анатомического недоразвития и функциональной недостаточности яичников, а следовательно, и различная степень изменений в миометрии и эндометрии. Поражение гипофиза может сопровождаться первичной или вторичной аменореей. Аменорея яичниковая наблюдается при недостаточности функции яичников или при полной ее отсутствии. В организме таких женщин мало фолликулярных гормонов и в начале заболевания увеличено количество гонадотропных гормонов. Если происходит созревание фолликула, а желтое тело не образуется и овуляции нет, то возникает полигормональная (фолликулиногенная) аменорея, которая сменяется обильным кровотечением.",18
15,"Гипоталамо-гипофизарная аменорея возникает при различных заболеваниях гипоталамо-гипофизарной системы. В зависимости от степени недостаточности гипофиза наблюдается различная степень анатомического недоразвития и функциональной недостаточности яичников, а следовательно, и различная степень изменений в миометрии и эндометрии. Поражение гипофиза может сопровождаться первичной или вторичной аменореей. Аменорея яичниковая наблюдается при недостаточности функции яичников или при полной ее отсутствии. В организме таких женщин мало фолликулярных гормонов и в начале заболевания увеличено количество гонадотропных гормонов. Если происходит созревание фолликула, а желтое тело не образуется и овуляции нет, то возникает полигормональная (фолликулиногенная) аменорея, которая сменяется обильным кровотечением.",19
16,"По данным сайта https://davlenie.guru/, длительно существующая артериальная гипертензия повышает риск развития почечной недостаточности, инсульта, застойной сердечной недостаточности, инфаркта миокарда. Агрессивный подход к контролю АД снижает летальность и частоту сердечно-сосудистых осложнений артериальной гипертензии, особенно у лиц, имеющих поражение органов-мишеней (почечная недостаточность, поражение сосудов головного мозга, особенно с клиникой энцефалопатии). Ежегодно создаются новые классы антигипертензивных препаратов; анестезиолог должен знать об их потенциальном взаимодействии с анестетиками. Например ингибиторы ангиотензинпревращающего фермента (АПФ) и антагонисты ангиотензиновых рецепторов (ААР) способны после вводной анестезии приводить к гипотензии, резистентной к лечению обычными средствами. Недавно проведенное двойное слепое исследование показало, что риск развития гипотензии снижается, если эти препараты отменяются более чем за 10 часов до индукции анестезии. Результаты будущих исследований помогут определить оптимальные режимы лечения.",10
16,"По данным сайта https://davlenie.guru/, длительно существующая артериальная гипертензия повышает риск развития почечной недостаточности, инсульта, застойной сердечной недостаточности, инфаркта миокарда. Агрессивный подход к контролю АД снижает летальность и частоту сердечно-сосудистых осложнений артериальной гипертензии, особенно у лиц, имеющих поражение органов-мишеней (почечная недостаточность, поражение сосудов головного мозга, особенно с клиникой энцефалопатии). Ежегодно создаются новые классы антигипертензивных препаратов; анестезиолог должен знать об их потенциальном взаимодействии с анестетиками. Например ингибиторы ангиотензинпревращающего фермента (АПФ) и антагонисты ангиотензиновых рецепторов (ААР) способны после вводной анестезии приводить к гипотензии, резистентной к лечению обычными средствами. Недавно проведенное двойное слепое исследование показало, что риск развития гипотензии снижается, если эти препараты отменяются более чем за 10 часов до индукции анестезии. Результаты будущих исследований помогут определить оптимальные режимы лечения.",11
16,"По данным сайта https://davlenie.guru/, длительно существующая артериальная гипертензия повышает риск развития почечной недостаточности, инсульта, застойной сердечной недостаточности, инфаркта миокарда. Агрессивный подход к контролю АД снижает летальность и частоту сердечно-сосудистых осложнений артериальной гипертензии, особенно у лиц, имеющих поражение органов-мишеней (почечная недостаточность, поражение сосудов головного мозга, особенно с клиникой энцефалопатии). Ежегодно создаются новые классы антигипертензивных препаратов; анестезиолог должен знать об их потенциальном взаимодействии с анестетиками. Например ингибиторы ангиотензинпревращающего фермента (АПФ) и антагонисты ангиотензиновых рецепторов (ААР) способны после вводной анестезии приводить к гипотензии, резистентной к лечению обычными средствами. Недавно проведенное двойное слепое исследование показало, что риск развития гипотензии снижается, если эти препараты отменяются более чем за 10 часов до индукции анестезии. Результаты будущих исследований помогут определить оптимальные режимы лечения.",12
16,"По данным сайта https://davlenie.guru/, длительно существующая артериальная гипертензия повышает риск развития почечной недостаточности, инсульта, застойной сердечной недостаточности, инфаркта миокарда. Агрессивный подход к контролю АД снижает летальность и частоту сердечно-сосудистых осложнений артериальной гипертензии, особенно у лиц, имеющих поражение органов-мишеней (почечная недостаточность, поражение сосудов головного мозга, особенно с клиникой энцефалопатии). Ежегодно создаются новые классы антигипертензивных препаратов; анестезиолог должен знать об их потенциальном взаимодействии с анестетиками. Например ингибиторы ангиотензинпревращающего фермента (АПФ) и антагонисты ангиотензиновых рецепторов (ААР) способны после вводной анестезии приводить к гипотензии, резистентной к лечению обычными средствами. Недавно проведенное двойное слепое исследование показало, что риск развития гипотензии снижается, если эти препараты отменяются более чем за 10 часов до индукции анестезии. Результаты будущих исследований помогут определить оптимальные режимы лечения.",13
16,"По данным сайта https://davlenie.guru/, длительно существующая артериальная гипертензия повышает риск развития почечной недостаточности, инсульта, застойной сердечной недостаточности, инфаркта миокарда. Агрессивный подход к контролю АД снижает летальность и частоту сердечно-сосудистых осложнений артериальной гипертензии, особенно у лиц, имеющих поражение органов-мишеней (почечная недостаточность, поражение сосудов головного мозга, особенно с клиникой энцефалопатии). Ежегодно создаются новые классы антигипертензивных препаратов; анестезиолог должен знать об их потенциальном взаимодействии с анестетиками. Например ингибиторы ангиотензинпревращающего фермента (АПФ) и антагонисты ангиотензиновых рецепторов (ААР) способны после вводной анестезии приводить к гипотензии, резистентной к лечению обычными средствами. Недавно проведенное двойное слепое исследование показало, что риск развития гипотензии снижается, если эти препараты отменяются более чем за 10 часов до индукции анестезии. Результаты будущих исследований помогут определить оптимальные режимы лечения.",14
16,"По данным сайта https://davlenie.guru/, длительно существующая артериальная гипертензия повышает риск развития почечной недостаточности, инсульта, застойной сердечной недостаточности, инфаркта миокарда. Агрессивный подход к контролю АД снижает летальность и частоту сердечно-сосудистых осложнений артериальной гипертензии, особенно у лиц, имеющих поражение органов-мишеней (почечная недостаточность, поражение сосудов головного мозга, особенно с клиникой энцефалопатии). Ежегодно создаются новые классы антигипертензивных препаратов; анестезиолог должен знать об их потенциальном взаимодействии с анестетиками. Например ингибиторы ангиотензинпревращающего фермента (АПФ) и антагонисты ангиотензиновых рецепторов (ААР) способны после вводной анестезии приводить к гипотензии, резистентной к лечению обычными средствами. Недавно проведенное двойное слепое исследование показало, что риск развития гипотензии снижается, если эти препараты отменяются более чем за 10 часов до индукции анестезии. Результаты будущих исследований помогут определить оптимальные режимы лечения.",15
16,"По данным сайта https://davlenie.guru/, длительно существующая артериальная гипертензия повышает риск развития почечной недостаточности, инсульта, застойной сердечной недостаточности, инфаркта миокарда. Агрессивный подход к контролю АД снижает летальность и частоту сердечно-сосудистых осложнений артериальной гипертензии, особенно у лиц, имеющих поражение органов-мишеней (почечная недостаточность, поражение сосудов головного мозга, особенно с клиникой энцефалопатии). Ежегодно создаются новые классы антигипертензивных препаратов; анестезиолог должен знать об их потенциальном взаимодействии с анестетиками. Например ингибиторы ангиотензинпревращающего фермента (АПФ) и антагонисты ангиотензиновых рецепторов (ААР) способны после вводной анестезии приводить к гипотензии, резистентной к лечению обычными средствами. Недавно проведенное двойное слепое исследование показало, что риск развития гипотензии снижается, если эти препараты отменяются более чем за 10 часов до индукции анестезии. Результаты будущих исследований помогут определить оптимальные режимы лечения.",17
16,"По данным сайта https://davlenie.guru/, длительно существующая артериальная гипертензия повышает риск развития почечной недостаточности, инсульта, застойной сердечной недостаточности, инфаркта миокарда. Агрессивный подход к контролю АД снижает летальность и частоту сердечно-сосудистых осложнений артериальной гипертензии, особенно у лиц, имеющих поражение органов-мишеней (почечная недостаточность, поражение сосудов головного мозга, особенно с клиникой энцефалопатии). Ежегодно создаются новые классы антигипертензивных препаратов; анестезиолог должен знать об их потенциальном взаимодействии с анестетиками. Например ингибиторы ангиотензинпревращающего фермента (АПФ) и антагонисты ангиотензиновых рецепторов (ААР) способны после вводной анестезии приводить к гипотензии, резистентной к лечению обычными средствами. Недавно проведенное двойное слепое исследование показало, что риск развития гипотензии снижается, если эти препараты отменяются более чем за 10 часов до индукции анестезии. Результаты будущих исследований помогут определить оптимальные режимы лечения.",18
16,"По данным сайта https://davlenie.guru/, длительно существующая артериальная гипертензия повышает риск развития почечной недостаточности, инсульта, застойной сердечной недостаточности, инфаркта миокарда. Агрессивный подход к контролю АД снижает летальность и частоту сердечно-сосудистых осложнений артериальной гипертензии, особенно у лиц, имеющих поражение органов-мишеней (почечная недостаточность, поражение сосудов головного мозга, особенно с клиникой энцефалопатии). Ежегодно создаются новые классы антигипертензивных препаратов; анестезиолог должен знать об их потенциальном взаимодействии с анестетиками. Например ингибиторы ангиотензинпревращающего фермента (АПФ) и антагонисты ангиотензиновых рецепторов (ААР) способны после вводной анестезии приводить к гипотензии, резистентной к лечению обычными средствами. Недавно проведенное двойное слепое исследование показало, что риск развития гипотензии снижается, если эти препараты отменяются более чем за 10 часов до индукции анестезии. Результаты будущих исследований помогут определить оптимальные режимы лечения.",19
17,"При использовании воды как оздоровительного фактора, надо учитывать резкое отличие организма ребенка от организма взрослого человека: недостаточную дифференцированность нервной системы, повышенную реактивность на воздействия внешней среды. Кожа первично воспринимает раздражения, вызванные водой. Реакция кожи ребенка на водную процедуру значительно более сильная, чем у взрослого, так как площадь кожного покрова по отношению к весу тела (на 1 кг) у ребенка значительно больше, чем у взрослого человека: у новорожденного она составляет 704 см2, у детей до 1 года — 626 см2, у детей 6 лет — 528 см2, а у взрослых — всего 291 см2. Таким образом, у маленького ребенка поверхность тела по отношению к его весу в 2-3 раза больше, чем у взрослого. К коже ребенка притекает больше крови, следовательно, больше и тепла, а большая поверхность кожи и нежность ее строения облегчают теплоотдачу во внешнюю среду. Большая теплоотдача организма ребенка объясняется также тем, что отдача и поглощение тепла прямо пропорциональны поверхности тела.",10
17,"При использовании воды как оздоровительного фактора, надо учитывать резкое отличие организма ребенка от организма взрослого человека: недостаточную дифференцированность нервной системы, повышенную реактивность на воздействия внешней среды. Кожа первично воспринимает раздражения, вызванные водой. Реакция кожи ребенка на водную процедуру значительно более сильная, чем у взрослого, так как площадь кожного покрова по отношению к весу тела (на 1 кг) у ребенка значительно больше, чем у взрослого человека: у новорожденного она составляет 704 см2, у детей до 1 года — 626 см2, у детей 6 лет — 528 см2, а у взрослых — всего 291 см2. Таким образом, у маленького ребенка поверхность тела по отношению к его весу в 2-3 раза больше, чем у взрослого. К коже ребенка притекает больше крови, следовательно, больше и тепла, а большая поверхность кожи и нежность ее строения облегчают теплоотдачу во внешнюю среду. Большая теплоотдача организма ребенка объясняется также тем, что отдача и поглощение тепла прямо пропорциональны поверхности тела.",11
17,"При использовании воды как оздоровительного фактора, надо учитывать резкое отличие организма ребенка от организма взрослого человека: недостаточную дифференцированность нервной системы, повышенную реактивность на воздействия внешней среды. Кожа первично воспринимает раздражения, вызванные водой. Реакция кожи ребенка на водную процедуру значительно более сильная, чем у взрослого, так как площадь кожного покрова по отношению к весу тела (на 1 кг) у ребенка значительно больше, чем у взрослого человека: у новорожденного она составляет 704 см2, у детей до 1 года — 626 см2, у детей 6 лет — 528 см2, а у взрослых — всего 291 см2. Таким образом, у маленького ребенка поверхность тела по отношению к его весу в 2-3 раза больше, чем у взрослого. К коже ребенка притекает больше крови, следовательно, больше и тепла, а большая поверхность кожи и нежность ее строения облегчают теплоотдачу во внешнюю среду. Большая теплоотдача организма ребенка объясняется также тем, что отдача и поглощение тепла прямо пропорциональны поверхности тела.",12
17,"При использовании воды как оздоровительного фактора, надо учитывать резкое отличие организма ребенка от организма взрослого человека: недостаточную дифференцированность нервной системы, повышенную реактивность на воздействия внешней среды. Кожа первично воспринимает раздражения, вызванные водой. Реакция кожи ребенка на водную процедуру значительно более сильная, чем у взрослого, так как площадь кожного покрова по отношению к весу тела (на 1 кг) у ребенка значительно больше, чем у взрослого человека: у новорожденного она составляет 704 см2, у детей до 1 года — 626 см2, у детей 6 лет — 528 см2, а у взрослых — всего 291 см2. Таким образом, у маленького ребенка поверхность тела по отношению к его весу в 2-3 раза больше, чем у взрослого. К коже ребенка притекает больше крови, следовательно, больше и тепла, а большая поверхность кожи и нежность ее строения облегчают теплоотдачу во внешнюю среду. Большая теплоотдача организма ребенка объясняется также тем, что отдача и поглощение тепла прямо пропорциональны поверхности тела.",13
17,"При использовании воды как оздоровительного фактора, надо учитывать резкое отличие организма ребенка от организма взрослого человека: недостаточную дифференцированность нервной системы, повышенную реактивность на воздействия внешней среды. Кожа первично воспринимает раздражения, вызванные водой. Реакция кожи ребенка на водную процедуру значительно более сильная, чем у взрослого, так как площадь кожного покрова по отношению к весу тела (на 1 кг) у ребенка значительно больше, чем у взрослого человека: у новорожденного она составляет 704 см2, у детей до 1 года — 626 см2, у детей 6 лет — 528 см2, а у взрослых — всего 291 см2. Таким образом, у маленького ребенка поверхность тела по отношению к его весу в 2-3 раза больше, чем у взрослого. К коже ребенка притекает больше крови, следовательно, больше и тепла, а большая поверхность кожи и нежность ее строения облегчают теплоотдачу во внешнюю среду. Большая теплоотдача организма ребенка объясняется также тем, что отдача и поглощение тепла прямо пропорциональны поверхности тела.",14
17,"При использовании воды как оздоровительного фактора, надо учитывать резкое отличие организма ребенка от организма взрослого человека: недостаточную дифференцированность нервной системы, повышенную реактивность на воздействия внешней среды. Кожа первично воспринимает раздражения, вызванные водой. Реакция кожи ребенка на водную процедуру значительно более сильная, чем у взрослого, так как площадь кожного покрова по отношению к весу тела (на 1 кг) у ребенка значительно больше, чем у взрослого человека: у новорожденного она составляет 704 см2, у детей до 1 года — 626 см2, у детей 6 лет — 528 см2, а у взрослых — всего 291 см2. Таким образом, у маленького ребенка поверхность тела по отношению к его весу в 2-3 раза больше, чем у взрослого. К коже ребенка притекает больше крови, следовательно, больше и тепла, а большая поверхность кожи и нежность ее строения облегчают теплоотдачу во внешнюю среду. Большая теплоотдача организма ребенка объясняется также тем, что отдача и поглощение тепла прямо пропорциональны поверхности тела.",15
17,"При использовании воды как оздоровительного фактора, надо учитывать резкое отличие организма ребенка от организма взрослого человека: недостаточную дифференцированность нервной системы, повышенную реактивность на воздействия внешней среды. Кожа первично воспринимает раздражения, вызванные водой. Реакция кожи ребенка на водную процедуру значительно более сильная, чем у взрослого, так как площадь кожного покрова по отношению к весу тела (на 1 кг) у ребенка значительно больше, чем у взрослого человека: у новорожденного она составляет 704 см2, у детей до 1 года — 626 см2, у детей 6 лет — 528 см2, а у взрослых — всего 291 см2. Таким образом, у маленького ребенка поверхность тела по отношению к его весу в 2-3 раза больше, чем у взрослого. К коже ребенка притекает больше крови, следовательно, больше и тепла, а большая поверхность кожи и нежность ее строения облегчают теплоотдачу во внешнюю среду. Большая теплоотдача организма ребенка объясняется также тем, что отдача и поглощение тепла прямо пропорциональны поверхности тела.",16
17,"При использовании воды как оздоровительного фактора, надо учитывать резкое отличие организма ребенка от организма взрослого человека: недостаточную дифференцированность нервной системы, повышенную реактивность на воздействия внешней среды. Кожа первично воспринимает раздражения, вызванные водой. Реакция кожи ребенка на водную процедуру значительно более сильная, чем у взрослого, так как площадь кожного покрова по отношению к весу тела (на 1 кг) у ребенка значительно больше, чем у взрослого человека: у новорожденного она составляет 704 см2, у детей до 1 года — 626 см2, у детей 6 лет — 528 см2, а у взрослых — всего 291 см2. Таким образом, у маленького ребенка поверхность тела по отношению к его весу в 2-3 раза больше, чем у взрослого. К коже ребенка притекает больше крови, следовательно, больше и тепла, а большая поверхность кожи и нежность ее строения облегчают теплоотдачу во внешнюю среду. Большая теплоотдача организма ребенка объясняется также тем, что отдача и поглощение тепла прямо пропорциональны поверхности тела.",18
17,"При использовании воды как оздоровительного фактора, надо учитывать резкое отличие организма ребенка от организма взрослого человека: недостаточную дифференцированность нервной системы, повышенную реактивность на воздействия внешней среды. Кожа первично воспринимает раздражения, вызванные водой. Реакция кожи ребенка на водную процедуру значительно более сильная, чем у взрослого, так как площадь кожного покрова по отношению к весу тела (на 1 кг) у ребенка значительно больше, чем у взрослого человека: у новорожденного она составляет 704 см2, у детей до 1 года — 626 см2, у детей 6 лет — 528 см2, а у взрослых — всего 291 см2. Таким образом, у маленького ребенка поверхность тела по отношению к его весу в 2-3 раза больше, чем у взрослого. К коже ребенка притекает больше крови, следовательно, больше и тепла, а большая поверхность кожи и нежность ее строения облегчают теплоотдачу во внешнюю среду. Большая теплоотдача организма ребенка объясняется также тем, что отдача и поглощение тепла прямо пропорциональны поверхности тела.",19
18,"Обструктивное сонное апноэ, или апноэ сна — это серьезное, потенциально жизнеугрожающее состояние, при котором во время сна повторяются эпизоды апноэ и гипопноэ как минимум 5-10 раз в час у взрослых (2 раза в час у детей) продолжительностью больше 10 секунд. Эти эпизоды возникают при полном или частичном закрытии просвета гортани в результате утраты тонуса мускулатуры верхних дыхательных путей. Данный синдром служит критерием повышенного риска анестезии из-за интраоперационного и послеоперационного состояния дыхательных путей. Встречаемость клинически значимого апноэ сна среди взрослого населения составляет 15% у мужчин и 5% у женщин, несмотря на то, что у 90% пациентов данное заболевание не выявляется.",10
18,"Обструктивное сонное апноэ, или апноэ сна — это серьезное, потенциально жизнеугрожающее состояние, при котором во время сна повторяются эпизоды апноэ и гипопноэ как минимум 5-10 раз в час у взрослых (2 раза в час у детей) продолжительностью больше 10 секунд. Эти эпизоды возникают при полном или частичном закрытии просвета гортани в результате утраты тонуса мускулатуры верхних дыхательных путей. Данный синдром служит критерием повышенного риска анестезии из-за интраоперационного и послеоперационного состояния дыхательных путей. Встречаемость клинически значимого апноэ сна среди взрослого населения составляет 15% у мужчин и 5% у женщин, несмотря на то, что у 90% пациентов данное заболевание не выявляется.",11
18,"Обструктивное сонное апноэ, или апноэ сна — это серьезное, потенциально жизнеугрожающее состояние, при котором во время сна повторяются эпизоды апноэ и гипопноэ как минимум 5-10 раз в час у взрослых (2 раза в час у детей) продолжительностью больше 10 секунд. Эти эпизоды возникают при полном или частичном закрытии просвета гортани в результате утраты тонуса мускулатуры верхних дыхательных путей. Данный синдром служит критерием повышенного риска анестезии из-за интраоперационного и послеоперационного состояния дыхательных путей. Встречаемость клинически значимого апноэ сна среди взрослого населения составляет 15% у мужчин и 5% у женщин, несмотря на то, что у 90% пациентов данное заболевание не выявляется.",12
18,"Обструктивное сонное апноэ, или апноэ сна — это серьезное, потенциально жизнеугрожающее состояние, при котором во время сна повторяются эпизоды апноэ и гипопноэ как минимум 5-10 раз в час у взрослых (2 раза в час у детей) продолжительностью больше 10 секунд. Эти эпизоды возникают при полном или частичном закрытии просвета гортани в результате утраты тонуса мускулатуры верхних дыхательных путей. Данный синдром служит критерием повышенного риска анестезии из-за интраоперационного и послеоперационного состояния дыхательных путей. Встречаемость клинически значимого апноэ сна среди взрослого населения составляет 15% у мужчин и 5% у женщин, несмотря на то, что у 90% пациентов данное заболевание не выявляется.",13
18,"Обструктивное сонное апноэ, или апноэ сна — это серьезное, потенциально жизнеугрожающее состояние, при котором во время сна повторяются эпизоды апноэ и гипопноэ как минимум 5-10 раз в час у взрослых (2 раза в час у детей) продолжительностью больше 10 секунд. Эти эпизоды возникают при полном или частичном закрытии просвета гортани в результате утраты тонуса мускулатуры верхних дыхательных путей. Данный синдром служит критерием повышенного риска анестезии из-за интраоперационного и послеоперационного состояния дыхательных путей. Встречаемость клинически значимого апноэ сна среди взрослого населения составляет 15% у мужчин и 5% у женщин, несмотря на то, что у 90% пациентов данное заболевание не выявляется.",14
18,"Обструктивное сонное апноэ, или апноэ сна — это серьезное, потенциально жизнеугрожающее состояние, при котором во время сна повторяются эпизоды апноэ и гипопноэ как минимум 5-10 раз в час у взрослых (2 раза в час у детей) продолжительностью больше 10 секунд. Эти эпизоды возникают при полном или частичном закрытии просвета гортани в результате утраты тонуса мускулатуры верхних дыхательных путей. Данный синдром служит критерием повышенного риска анестезии из-за интраоперационного и послеоперационного состояния дыхательных путей. Встречаемость клинически значимого апноэ сна среди взрослого населения составляет 15% у мужчин и 5% у женщин, несмотря на то, что у 90% пациентов данное заболевание не выявляется.",15
18,"Обструктивное сонное апноэ, или апноэ сна — это серьезное, потенциально жизнеугрожающее состояние, при котором во время сна повторяются эпизоды апноэ и гипопноэ как минимум 5-10 раз в час у взрослых (2 раза в час у детей) продолжительностью больше 10 секунд. Эти эпизоды возникают при полном или частичном закрытии просвета гортани в результате утраты тонуса мускулатуры верхних дыхательных путей. Данный синдром служит критерием повышенного риска анестезии из-за интраоперационного и послеоперационного состояния дыхательных путей. Встречаемость клинически значимого апноэ сна среди взрослого населения составляет 15% у мужчин и 5% у женщин, несмотря на то, что у 90% пациентов данное заболевание не выявляется.",16
18,"Обструктивное сонное апноэ, или апноэ сна — это серьезное, потенциально жизнеугрожающее состояние, при котором во время сна повторяются эпизоды апноэ и гипопноэ как минимум 5-10 раз в час у взрослых (2 раза в час у детей) продолжительностью больше 10 секунд. Эти эпизоды возникают при полном или частичном закрытии просвета гортани в результате утраты тонуса мускулатуры верхних дыхательных путей. Данный синдром служит критерием повышенного риска анестезии из-за интраоперационного и послеоперационного состояния дыхательных путей. Встречаемость клинически значимого апноэ сна среди взрослого населения составляет 15% у мужчин и 5% у женщин, несмотря на то, что у 90% пациентов данное заболевание не выявляется.",17
18,"Обструктивное сонное апноэ, или апноэ сна — это серьезное, потенциально жизнеугрожающее состояние, при котором во время сна повторяются эпизоды апноэ и гипопноэ как минимум 5-10 раз в час у взрослых (2 раза в час у детей) продолжительностью больше 10 секунд. Эти эпизоды возникают при полном или частичном закрытии просвета гортани в результате утраты тонуса мускулатуры верхних дыхательных путей. Данный синдром служит критерием повышенного риска анестезии из-за интраоперационного и послеоперационного состояния дыхательных путей. Встречаемость клинически значимого апноэ сна среди взрослого населения составляет 15% у мужчин и 5% у женщин, несмотря на то, что у 90% пациентов данное заболевание не выявляется.",19
19,"Хорея — это инфекционно-токсическое заболевание, основным признаком которого являются подергивания, обусловленные непроизвольным сокращением мышц. Этим быстрым, стремительным, непроизвольным движениям больного и обязано своим названием данное заболевание: «хорея» по-гречески означает «танец». Возбудитель, являющийся причиной хореи, до сих пор еще неизвестен, однако многие авторы указывают на связь хореи с ревматизмом. Основанием для этого является частое совпадение этих двух заболеваний, а также наличие в сердце больных хореей характерных для ревматизма изменения узелков Ашоф-Талалаева. Некоторые авторы рассматривают хорею как одно из многих проявлений ревматической инфекции, как особую форму ревматизма и говорят о хорее как о ревматизме головного мозга.",10
19,"Хорея — это инфекционно-токсическое заболевание, основным признаком которого являются подергивания, обусловленные непроизвольным сокращением мышц. Этим быстрым, стремительным, непроизвольным движениям больного и обязано своим названием данное заболевание: «хорея» по-гречески означает «танец». Возбудитель, являющийся причиной хореи, до сих пор еще неизвестен, однако многие авторы указывают на связь хореи с ревматизмом. Основанием для этого является частое совпадение этих двух заболеваний, а также наличие в сердце больных хореей характерных для ревматизма изменения узелков Ашоф-Талалаева. Некоторые авторы рассматривают хорею как одно из многих проявлений ревматической инфекции, как особую форму ревматизма и говорят о хорее как о ревматизме головного мозга.",11
19,"Хорея — это инфекционно-токсическое заболевание, основным признаком которого являются подергивания, обусловленные непроизвольным сокращением мышц. Этим быстрым, стремительным, непроизвольным движениям больного и обязано своим названием данное заболевание: «хорея» по-гречески означает «танец». Возбудитель, являющийся причиной хореи, до сих пор еще неизвестен, однако многие авторы указывают на связь хореи с ревматизмом. Основанием для этого является частое совпадение этих двух заболеваний, а также наличие в сердце больных хореей характерных для ревматизма изменения узелков Ашоф-Талалаева. Некоторые авторы рассматривают хорею как одно из многих проявлений ревматической инфекции, как особую форму ревматизма и говорят о хорее как о ревматизме головного мозга.",12
19,"Хорея — это инфекционно-токсическое заболевание, основным признаком которого являются подергивания, обусловленные непроизвольным сокращением мышц. Этим быстрым, стремительным, непроизвольным движениям больного и обязано своим названием данное заболевание: «хорея» по-гречески означает «танец». Возбудитель, являющийся причиной хореи, до сих пор еще неизвестен, однако многие авторы указывают на связь хореи с ревматизмом. Основанием для этого является частое совпадение этих двух заболеваний, а также наличие в сердце больных хореей характерных для ревматизма изменения узелков Ашоф-Талалаева. Некоторые авторы рассматривают хорею как одно из многих проявлений ревматической инфекции, как особую форму ревматизма и говорят о хорее как о ревматизме головного мозга.",13
19,"Хорея — это инфекционно-токсическое заболевание, основным признаком которого являются подергивания, обусловленные непроизвольным сокращением мышц. Этим быстрым, стремительным, непроизвольным движениям больного и обязано своим названием данное заболевание: «хорея» по-гречески означает «танец». Возбудитель, являющийся причиной хореи, до сих пор еще неизвестен, однако многие авторы указывают на связь хореи с ревматизмом. Основанием для этого является частое совпадение этих двух заболеваний, а также наличие в сердце больных хореей характерных для ревматизма изменения узелков Ашоф-Талалаева. Некоторые авторы рассматривают хорею как одно из многих проявлений ревматической инфекции, как особую форму ревматизма и говорят о хорее как о ревматизме головного мозга.",14
19,"Хорея — это инфекционно-токсическое заболевание, основным признаком которого являются подергивания, обусловленные непроизвольным сокращением мышц. Этим быстрым, стремительным, непроизвольным движениям больного и обязано своим названием данное заболевание: «хорея» по-гречески означает «танец». Возбудитель, являющийся причиной хореи, до сих пор еще неизвестен, однако многие авторы указывают на связь хореи с ревматизмом. Основанием для этого является частое совпадение этих двух заболеваний, а также наличие в сердце больных хореей характерных для ревматизма изменения узелков Ашоф-Талалаева. Некоторые авторы рассматривают хорею как одно из многих проявлений ревматической инфекции, как особую форму ревматизма и говорят о хорее как о ревматизме головного мозга.",15
19,"Хорея — это инфекционно-токсическое заболевание, основным признаком которого являются подергивания, обусловленные непроизвольным сокращением мышц. Этим быстрым, стремительным, непроизвольным движениям больного и обязано своим названием данное заболевание: «хорея» по-гречески означает «танец». Возбудитель, являющийся причиной хореи, до сих пор еще неизвестен, однако многие авторы указывают на связь хореи с ревматизмом. Основанием для этого является частое совпадение этих двух заболеваний, а также наличие в сердце больных хореей характерных для ревматизма изменения узелков Ашоф-Талалаева. Некоторые авторы рассматривают хорею как одно из многих проявлений ревматической инфекции, как особую форму ревматизма и говорят о хорее как о ревматизме головного мозга.",16
19,"Хорея — это инфекционно-токсическое заболевание, основным признаком которого являются подергивания, обусловленные непроизвольным сокращением мышц. Этим быстрым, стремительным, непроизвольным движениям больного и обязано своим названием данное заболевание: «хорея» по-гречески означает «танец». Возбудитель, являющийся причиной хореи, до сих пор еще неизвестен, однако многие авторы указывают на связь хореи с ревматизмом. Основанием для этого является частое совпадение этих двух заболеваний, а также наличие в сердце больных хореей характерных для ревматизма изменения узелков Ашоф-Талалаева. Некоторые авторы рассматривают хорею как одно из многих проявлений ревматической инфекции, как особую форму ревматизма и говорят о хорее как о ревматизме головного мозга.",17
19,"Хорея — это инфекционно-токсическое заболевание, основным признаком которого являются подергивания, обусловленные непроизвольным сокращением мышц. Этим быстрым, стремительным, непроизвольным движениям больного и обязано своим названием данное заболевание: «хорея» по-гречески означает «танец». Возбудитель, являющийся причиной хореи, до сих пор еще неизвестен, однако многие авторы указывают на связь хореи с ревматизмом. Основанием для этого является частое совпадение этих двух заболеваний, а также наличие в сердце больных хореей характерных для ревматизма изменения узелков Ашоф-Талалаева. Некоторые авторы рассматривают хорею как одно из многих проявлений ревматической инфекции, как особую форму ревматизма и говорят о хорее как о ревматизме головного мозга.",18